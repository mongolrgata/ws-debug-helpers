bigCalc=(function(){if(!Array.prototype.map){Array.map=function(self,fun){var len=self.length>>>0;if(typeof fun!=="function"){throw new TypeError();}var res=new Array(len);var thisp=arguments[2];for(var i=0;i<len;i++){if(i in self){res[i]=fun.call(thisp,self[i],i,self);}}return res;};}if(!Array.indexOf){Array.indexOf=function(arr,e){if(!(arr instanceof Array)){throw new TypeError("Incorrect type of the first arguments. Array expected");}if([].indexOf){return arr.indexOf(e,arguments[2]);}var len=arr.length;var from=Number(arguments[2])||0;from=(from<0)?Math.ceil(from):Math.floor(from);if(from<0){from+=len;}for(;from<len;from++){if(arr[from]===e){return from;}}return -1;};}var forEachMethod;var global=(function(){return this||(0,eval)("this");}());if("$ws" in global&&$ws.helpers&&$ws.helpers.forEach){forEachMethod=$ws.helpers.forEach;}else{forEachMethod=function(obj,iterateCallback,context){if(obj===null||obj===undefined){return;}if(obj.length===+obj.length){for(var i=0,l=obj.length;i<l;i++){if(i in obj){iterateCallback.call(context,obj[i],i,obj);}}}else{for(var key in obj){if(obj.hasOwnProperty(key)){iterateCallback.call(context,obj[key],key,obj);}}}};}function BigInteger(n,s){if(!(this instanceof BigInteger)){if(n instanceof BigInteger){return n;}else{if(typeof n==="undefined"){return BigInteger.ZERO;}}return BigInteger.parse(n);}n=n||[];while(n.length&&!n[n.length-1]){--n.length;}this._d=n;this._s=n.length?(s||1):0;}BigInteger.base=10000000;BigInteger.base_log10=7;BigInteger.init=function(){BigInteger.ZERO=new BigInteger([],0);BigInteger.ONE=new BigInteger([1],1);BigInteger.M_ONE=new BigInteger(BigInteger.ONE._d,-1);BigInteger._0=BigInteger.ZERO;BigInteger._1=BigInteger.ONE;BigInteger.small=[BigInteger.ZERO,BigInteger.ONE,new BigInteger([2],1),new BigInteger([3],1),new BigInteger([4],1),new BigInteger([5],1),new BigInteger([6],1),new BigInteger([7],1),new BigInteger([8],1),new BigInteger([9],1),new BigInteger([10],1),new BigInteger([11],1),new BigInteger([12],1),new BigInteger([13],1),new BigInteger([14],1),new BigInteger([15],1),new BigInteger([16],1),new BigInteger([17],1),new BigInteger([18],1),new BigInteger([19],1),new BigInteger([20],1),new BigInteger([21],1),new BigInteger([22],1),new BigInteger([23],1),new BigInteger([24],1),new BigInteger([25],1),new BigInteger([26],1),new BigInteger([27],1),new BigInteger([28],1),new BigInteger([29],1),new BigInteger([30],1),new BigInteger([31],1),new BigInteger([32],1),new BigInteger([33],1),new BigInteger([34],1),new BigInteger([35],1),new BigInteger([36],1)];};BigInteger.init();BigInteger.digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");BigInteger.prototype.toString=function(base){base=+base||10;if(base<2||base>36){throw new Error("illegal radix "+base+".");}if(this._s===0){return"0";}if(base===10){var str=this._s<0?"-":"";str+=this._d[this._d.length-1].toString();for(var i=this._d.length-2;i>=0;i--){var group=this._d[i].toString();while(group.length<BigInteger.base_log10){group="0"+group;}str+=group;}return str;}else{var numerals=BigInteger.digits;base=BigInteger.small[base];var sign=this._s;var n=this.abs();var digits=[];var digit;while(n._s!==0){var divmod=n.divRem(base);n=divmod[0];digit=divmod[1];digits.push(numerals[digit.valueOf()]);}return(sign<0?"-":"")+digits.reverse().join("");}};BigInteger.radixRegex=[/^$/,/^$/,/^[01]*$/,/^[012]*$/,/^[0-3]*$/,/^[0-4]*$/,/^[0-5]*$/,/^[0-6]*$/,/^[0-7]*$/,/^[0-8]*$/,/^[0-9]*$/,/^[0-9aA]*$/,/^[0-9abAB]*$/,/^[0-9abcABC]*$/,/^[0-9a-dA-D]*$/,/^[0-9a-eA-E]*$/,/^[0-9a-fA-F]*$/,/^[0-9a-gA-G]*$/,/^[0-9a-hA-H]*$/,/^[0-9a-iA-I]*$/,/^[0-9a-jA-J]*$/,/^[0-9a-kA-K]*$/,/^[0-9a-lA-L]*$/,/^[0-9a-mA-M]*$/,/^[0-9a-nA-N]*$/,/^[0-9a-oA-O]*$/,/^[0-9a-pA-P]*$/,/^[0-9a-qA-Q]*$/,/^[0-9a-rA-R]*$/,/^[0-9a-sA-S]*$/,/^[0-9a-tA-T]*$/,/^[0-9a-uA-U]*$/,/^[0-9a-vA-V]*$/,/^[0-9a-wA-W]*$/,/^[0-9a-xA-X]*$/,/^[0-9a-yA-Y]*$/,/^[0-9a-zA-Z]*$/];BigInteger.parse=function(s,base){function expandExponential(str){str=str.replace(/\s*[*xX]\s*10\s*(\^|\*\*)\s*/,"e");return str.replace(/^([+\-])?(\d+)\.?(\d*)[eE]([+\-]?\d+)$/,function(x,s,n,f,c){c=+c;var l=c<0;var i=n.length+c;x=(l?n:f).length;c=((c=Math.abs(c))>=x?c-x+l:0);var z=(new Array(c+1)).join("0");var r=n+f;return(s||"")+(l?r=z+r:r+=z).substr(0,i+=l?z.length:0)+(i<r.length?"."+r.substr(i):"");});}s=s.toString();if(typeof base==="undefined"||+base===10){s=expandExponential(s);}var parts=/^([+\-]?)(0[xXcCbB])?([0-9A-Za-z]*)(?:\.\d*)?$/.exec(s);if(parts){var sign=parts[1]||"+";var baseSection=parts[2]||"";var digits=parts[3]||"";if(typeof base==="undefined"){if(baseSection==="0x"||baseSection==="0X"){base=16;}else{if(baseSection==="0c"||baseSection==="0C"){base=8;}else{if(baseSection==="0b"||baseSection==="0B"){base=2;}else{base=10;}}}}else{if(base<2||base>36){throw new Error("Illegal radix "+base+".");}}base=+base;if(!(BigInteger.radixRegex[base].test(digits))){throw new Error("Bad digit for radix "+base);}digits=digits.replace(/^0+/,"").split("");if(digits.length===0){return BigInteger.ZERO;}sign=(sign==="-")?-1:1;if(base==10){var d=[];while(digits.length>=BigInteger.base_log10){d.push(parseInt(digits.splice(Math.max(0,digits.length-BigInteger.base_log10),BigInteger.base_log10).join(""),10));}d.push(parseInt(digits.join(""),10));return new BigInteger(d,sign);}if(base===BigInteger.base){return new BigInteger(Array.map(digits,Number).reverse(),sign);}var d=BigInteger.ZERO;base=BigInteger.small[base];var small=BigInteger.small;for(var i=0;i<digits.length;i++){d=d.multiply(base).add(small[parseInt(digits[i],36)]);}return new BigInteger(d._d,sign);}else{throw new Error("Invalid BigInteger format: "+s);}};BigInteger.prototype.add=function(n){if(this._s===0){return BigInteger(n);}n=BigInteger(n);if(n._s===0){return this;}if(this._s!==n._s){n=n.negate();return this.subtract(n);}var a=this._d;var b=n._d;var al=a.length;var bl=b.length;var sum=new Array(Math.max(al,bl)+1);var size=Math.min(al,bl);var carry=0;var digit;for(var i=0;i<size;i++){digit=a[i]+b[i]+carry;sum[i]=digit%BigInteger.base;carry=(digit/BigInteger.base)|0;}if(bl>al){a=b;al=bl;}for(i=size;carry&&i<al;i++){digit=a[i]+carry;sum[i]=digit%BigInteger.base;carry=(digit/BigInteger.base)|0;}if(carry){sum[i]=carry;}for(;i<al;i++){sum[i]=a[i];}return new BigInteger(sum,this._s);};BigInteger.prototype.negate=function(){return new BigInteger(this._d,-this._s);};BigInteger.prototype.abs=function(){return(this._s<0)?this.negate():this;};BigInteger.prototype.subtract=function(n){if(this._s===0){return BigInteger(n).negate();}n=BigInteger(n);if(n._s===0){return this;}if(this._s!==n._s){n=n.negate();return this.add(n);}var m=this;var t;if(this._s<0){t=m;m=new BigInteger(n._d,1);n=new BigInteger(t._d,1);}var sign=m.compareAbs(n);if(sign===0){return BigInteger.ZERO;}else{if(sign<0){t=n;n=m;m=t;}}var a=m._d;var b=n._d;var al=a.length;var bl=b.length;var diff=new Array(al);var borrow=0;var i;var digit;for(i=0;i<bl;i++){digit=a[i]-borrow-b[i];if(digit<0){digit+=BigInteger.base;borrow=1;}else{borrow=0;}diff[i]=digit;}for(i=bl;i<al;i++){digit=a[i]-borrow;if(digit<0){digit+=BigInteger.base;}else{diff[i++]=digit;break;}diff[i]=digit;}for(;i<al;i++){diff[i]=a[i];}return new BigInteger(diff,sign);};(function(){function addOne(n,sign){var a=n._d;var sum=a.slice();var carry=true;var i=0;while(true){var digit=(a[i]||0)+1;sum[i]=digit%BigInteger.base;if(digit<=BigInteger.base-1){break;}++i;}return new BigInteger(sum,sign);}function subtractOne(n,sign){var a=n._d;var sum=a.slice();var borrow=true;var i=0;while(true){var digit=(a[i]||0)-1;if(digit<0){sum[i]=digit+BigInteger.base;}else{sum[i]=digit;break;}++i;}return new BigInteger(sum,sign);}BigInteger.prototype.next=function(){switch(this._s){case 0:return BigInteger.ONE;case -1:return subtractOne(this,-1);default:return addOne(this,1);}};BigInteger.prototype.prev=function(){switch(this._s){case 0:return BigInteger.M_ONE;case -1:return addOne(this,-1);default:return subtractOne(this,1);}};})();BigInteger.prototype.compareAbs=function(n){if(this===n){return 0;}if(!(n instanceof BigInteger)){if(!isFinite(n)){return(isNaN(n)?n:-1);}n=BigInteger(n);}if(this._s===0){return(n._s!==0)?-1:0;}if(n._s===0){return 1;}var l=this._d.length;var nl=n._d.length;if(l<nl){return -1;}else{if(l>nl){return 1;}}var a=this._d;var b=n._d;for(var i=l-1;i>=0;i--){if(a[i]!==b[i]){return a[i]<b[i]?-1:1;}}return 0;};BigInteger.prototype.compare=function(n){if(this===n){return 0;}n=BigInteger(n);if(this._s===0){return -n._s;}if(this._s===n._s){var cmp=this.compareAbs(n);return cmp*this._s;}else{return this._s;}};BigInteger.prototype.isUnit=function(){return this===BigInteger.ONE||this===BigInteger.M_ONE||(this._d.length===1&&this._d[0]===1);};BigInteger.prototype.multiply=function(n){if(this._s===0){return BigInteger.ZERO;}n=BigInteger(n);if(n._s===0){return BigInteger.ZERO;}if(this.isUnit()){if(this._s<0){return n.negate();}return n;}if(n.isUnit()){if(n._s<0){return this.negate();}return this;}if(this===n){return this.square();}var r=(this._d.length>=n._d.length);var a=(r?this:n)._d;var b=(r?n:this)._d;var al=a.length;var bl=b.length;var pl=al+bl;var partial=new Array(pl);var i;for(i=0;i<pl;i++){partial[i]=0;}for(i=0;i<bl;i++){var carry=0;var bi=b[i];var jlimit=al+i;var digit;for(var j=i;j<jlimit;j++){digit=partial[j]+bi*a[j-i]+carry;carry=(digit/BigInteger.base)|0;partial[j]=(digit%BigInteger.base)|0;}if(carry){digit=partial[j]+carry;carry=(digit/BigInteger.base)|0;partial[j]=digit%BigInteger.base;}}return new BigInteger(partial,this._s*n._s);};BigInteger.prototype.multiplySingleDigit=function(n){if(n===0||this._s===0){return BigInteger.ZERO;}if(n===1){return this;}var digit;if(this._d.length===1){digit=this._d[0]*n;if(digit>=BigInteger.base){return new BigInteger([(digit%BigInteger.base)|0,(digit/BigInteger.base)|0],1);}return new BigInteger([digit],1);}if(n===2){return this.add(this);}if(this.isUnit()){return new BigInteger([n],1);}var a=this._d;var al=a.length;var pl=al+1;var partial=new Array(pl);for(var i=0;i<pl;i++){partial[i]=0;}var carry=0;for(var j=0;j<al;j++){digit=n*a[j]+carry;carry=(digit/BigInteger.base)|0;partial[j]=(digit%BigInteger.base)|0;}if(carry){digit=carry;carry=(digit/BigInteger.base)|0;partial[j]=digit%BigInteger.base;}return new BigInteger(partial,1);};BigInteger.prototype.square=function(){if(this._s===0){return BigInteger.ZERO;}if(this.isUnit()){return BigInteger.ONE;}var digits=this._d;var length=digits.length;var imult1=new Array(length+length+1);var product,carry,k;var i;for(i=0;i<length;i++){k=i*2;product=digits[i]*digits[i];carry=(product/BigInteger.base)|0;imult1[k]=product%BigInteger.base;imult1[k+1]=carry;}for(i=0;i<length;i++){carry=0;k=i*2+1;for(var j=i+1;j<length;j++,k++){product=digits[j]*digits[i]*2+imult1[k]+carry;carry=(product/BigInteger.base)|0;imult1[k]=product%BigInteger.base;}k=length+i;var digit=carry+imult1[k];carry=(digit/BigInteger.base)|0;imult1[k]=digit%BigInteger.base;imult1[k+1]+=carry;}return new BigInteger(imult1,1);};BigInteger.prototype.quotient=function(n){return this.divRem(n)[0];};BigInteger.prototype.divide=BigInteger.prototype.quotient;BigInteger.prototype.remainder=function(n){return this.divRem(n)[1];};BigInteger.prototype.divRem=function(n){n=BigInteger(n);if(n._s===0){throw new Error("Divide by zero");}if(this._s===0){return[BigInteger.ZERO,BigInteger.ZERO];}if(n._d.length===1){return this.divRemSmall(n._s*n._d[0]);}switch(this.compareAbs(n)){case 0:return[this._s===n._s?BigInteger.ONE:BigInteger.M_ONE,BigInteger.ZERO];case -1:return[BigInteger.ZERO,this];}var sign=this._s*n._s;var a=n.abs();var b_digits=this._d.slice();var digits=n._d.length;var max=b_digits.length;var quot=[];var guess;var part=new BigInteger([],1);part._s=1;while(b_digits.length){part._d.unshift(b_digits.pop());part=new BigInteger(part._d,1);if(part.compareAbs(n)<0){quot.push(0);continue;}if(part._s===0){guess=0;}else{var xlen=part._d.length,ylen=a._d.length;var highx=part._d[xlen-1]*BigInteger.base+part._d[xlen-2];var highy=a._d[ylen-1]*BigInteger.base+a._d[ylen-2];if(part._d.length>a._d.length){highx=(highx+1)*BigInteger.base;}guess=Math.ceil(highx/highy);}do{var check=a.multiplySingleDigit(guess);if(check.compareAbs(part)<=0){break;}guess--;}while(guess);quot.push(guess);if(!guess){continue;}var diff=part.subtract(check);part._d=diff._d.slice();}return[new BigInteger(quot.reverse(),sign),new BigInteger(part._d,this._s)];};BigInteger.prototype.divRemSmall=function(n){var r;n=+n;if(n===0){throw new Error("Divide by zero");}var n_s=n<0?-1:1;var sign=this._s*n_s;n=Math.abs(n);if(n<1||n>=BigInteger.base){throw new Error("Argument out of range");}if(this._s===0){return[BigInteger.ZERO,BigInteger.ZERO];}if(n===1||n===-1){return[(sign===1)?this.abs():new BigInteger(this._d,sign),BigInteger.ZERO];}if(this._d.length===1){var q=new BigInteger([(this._d[0]/n)|0],1);r=new BigInteger([(this._d[0]%n)|0],1);if(sign<0){q=q.negate();}if(this._s<0){r=r.negate();}return[q,r];}var digits=this._d.slice();var quot=new Array(digits.length);var part=0;var diff=0;var i=0;var guess;while(digits.length){part=part*BigInteger.base+digits[digits.length-1];if(part<n){quot[i++]=0;digits.pop();diff=BigInteger.base*diff+part;continue;}if(part===0){guess=0;}else{guess=(part/n)|0;}var check=n*guess;diff=part-check;quot[i++]=guess;if(!guess){digits.pop();continue;}digits.pop();part=diff;}r=new BigInteger([diff],1);if(this._s<0){r=r.negate();}return[new BigInteger(quot.reverse(),sign),r];};BigInteger.prototype.isEven=function(){var digits=this._d;return this._s===0||digits.length===0||(digits[0]%2)===0;};BigInteger.prototype.isOdd=function(){return !this.isEven();};BigInteger.prototype.sign=function(){return this._s;};BigInteger.prototype.isPositive=function(){return this._s>0;};BigInteger.prototype.isNegative=function(){return this._s<0;};BigInteger.prototype.isZero=function(){return this._s===0;};BigInteger.prototype.exp10=function(n){n=+n;if(n===0){return this;}if(Math.abs(n)>Number(BigInteger.MAX_EXP)){throw new Error("exponent too large in BigInteger.exp10");}if(n>0){var k=new BigInteger(this._d.slice(),this._s);for(;n>=BigInteger.base_log10;n-=BigInteger.base_log10){k._d.unshift(0);}if(n==0){return k;}k._s=1;k=k.multiplySingleDigit(Math.pow(10,n));return(this._s<0?k.negate():k);}else{if(-n>=this._d.length*BigInteger.base_log10){return BigInteger.ZERO;}else{var k=new BigInteger(this._d.slice(),this._s);for(n=-n;n>=BigInteger.base_log10;n-=BigInteger.base_log10){k._d.shift();}return(n==0)?k:k.divRemSmall(Math.pow(10,n))[0];}}};BigInteger.prototype.pow=function(n){if(this.isUnit()){if(this._s>0){return this;}else{return BigInteger(n).isOdd()?this:this.negate();}}n=BigInteger(n);if(n._s===0){return BigInteger.ONE;}else{if(n._s<0){if(this._s===0){throw new Error("Divide by zero");}else{return BigInteger.ZERO;}}}if(this._s===0){return BigInteger.ZERO;}if(n.isUnit()){return this;}if(n.compareAbs(BigInteger.MAX_EXP)>0){throw new Error("exponent too large in BigInteger.pow");}var x=this;var aux=BigInteger.ONE;var two=BigInteger.small[2];while(n.isPositive()){if(n.isOdd()){aux=aux.multiply(x);if(n.isUnit()){return aux;}}x=x.square();n=n.quotient(two);}return aux;};BigInteger.prototype.modPow=function(exponent,modulus){var result=BigInteger.ONE;var base=this;while(exponent.isPositive()){if(exponent.isOdd()){result=result.multiply(base).remainder(modulus);}exponent=exponent.quotient(BigInteger.small[2]);if(exponent.isPositive()){base=base.square().remainder(modulus);}}return result;};BigInteger.prototype.log=function(){switch(this._s){case 0:return -Infinity;case -1:return NaN;default:}var l=this._d.length;if(l*BigInteger.base_log10<30){return Math.log(this.valueOf());}var N=Math.ceil(30/BigInteger.base_log10);var firstNdigits=this._d.slice(l-N);return Math.log((new BigInteger(firstNdigits,1)).valueOf())+(l-N)*Math.log(BigInteger.base);};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10);};BigInteger.prototype.toJSValue=function(){return parseInt(this.toString(),10);};BigInteger.MAX_EXP=BigInteger(2147483647);(function(){function makeUnary(fn){return function(a){return fn.call(BigInteger(a));};}function makeBinary(fn){return function(a,b){return fn.call(BigInteger(a),BigInteger(b));};}function makeTrinary(fn){return function(a,b,c){return fn.call(BigInteger(a),BigInteger(b),BigInteger(c));};}(function(){var i,fn;var unary="toJSValue,isEven,isOdd,sign,isZero,isNegative,abs,isUnit,square,negate,isPositive,toString,next,prev,log".split(",");var binary="compare,remainder,divRem,subtract,add,quotient,divide,multiply,pow,compareAbs".split(",");var trinary=["modPow"];for(i=0;i<unary.length;i++){fn=unary[i];BigInteger[fn]=makeUnary(BigInteger.prototype[fn]);}for(i=0;i<binary.length;i++){fn=binary[i];BigInteger[fn]=makeBinary(BigInteger.prototype[fn]);}for(i=0;i<trinary.length;i++){fn=trinary[i];BigInteger[fn]=makeTrinary(BigInteger.prototype[fn]);}BigInteger.exp10=function(x,n){return BigInteger(x).exp10(n);};})();})();if(typeof exports!=="undefined"){exports.BigInteger=BigInteger;}var SchemeNumber=(function(){var DispatchJs=(function(){function short_fn(f){return String(f).replace(/(?:.|\n)*(function .*?\(.*?\))(?:.|\n)*/,"$1");}var Formals=[];function makeContext(opts){var g=opts.globals;var _Function=(g?g.Function:Function);var uncurry=_Function.prototype.bind.bind(_Function.prototype.call);var _Object=(g?g.Object:Object);var _String=(g?g.String:String);var _Array=(g?g.Array:Array);var _Error=(g?g.Error:Error);var _apply=uncurry(_Function.prototype.apply);var _slice=uncurry(_Array.prototype.slice);var _join=uncurry(_Array.prototype.join);var _push=uncurry(_Array.prototype.push);var _unshift=uncurry(_Array.prototype.unshift);var _forEach=forEachMethod;var _concat=uncurry(_Array.prototype.concat);var _replace=uncurry(_String.prototype.replace);var _split=uncurry(_String.prototype.split);var _create=_Object.create;var _hasOwnProperty=uncurry(_Object.prototype.hasOwnProperty);var String_indexOf=uncurry(_String.prototype.indexOf);var Array_indexOf=Array.indexOf;var prefix=opts.methodNamePrefix||"_jsmd";var ePrefix=_replace(prefix,/([\"\\])/g,"\\$1");var sep=opts.methodNameSeparator||" ";var classes=_create(null);function classToName(cl){if(cl!=null){var name=cl[prefix];if(typeof name==="string"){if(classes[name]&&classes[name].ctor===cl){return name;}else{for(name in classes){if(classes[name]&&classes[name].ctor===cl){return name;}}}}}}function assertClassToName(cl){if("string"===typeof cl){return cl;}var ret=classToName(cl);if(ret){return ret;}throw _Error("Class not defined: "+cl);}function pureVirtual(){var msg="Abstract method not overridden for ";try{msg+=this;}catch(e){try{msg+=_Object.prototype.toString.call(this);}catch(e){msg+="object";}}throw new _Error(msg);}var ret={getConstructor:function(name){return classes[name]&&classes[name].ctor;},defClass:function(name,opts){var ctor,base;var bctor,proto,key,sub,sepBase,cname,c;var ometh,meth,func,array,doit,i,indices;opts.debug&&console.log("defClass: ",name);if(opts){ctor=opts.ctor;if(opts.base){base=assertClassToName(opts.base);}}if(typeof base==="undefined"&&ctor&&ctor.prototype!=null){base=classToName(ctor.prototype.constructor);}if(typeof base!=="undefined"){bctor=classes[base].ctor;}ctor=ctor||function(){};if(typeof name!=="string"){throw _Error("Usage: defClass(NAME, [OPTS])");}if(classes[name]){if(classes[name].ctor!==ctor||classes[name].base!==base){throw _Error("Can't redefine class "+name);}return ctor;}if(String_indexOf(name,sep)!=-1){throw _Error((sep==" "?"Space":"Separator")+" in class name: "+name);}if(typeof(ctor[prefix])!=="undefined"){if(ctor[prefix]!==name){throw _Error("Cannot define constructor as "+name+", it was previously defined as "+ctor[prefix]);}}else{ctor[prefix]=name;}if(ctor.prototype){if(_hasOwnProperty(ctor.prototype,"constructor")){if(ctor.prototype.constructor!==ctor){throw _Error("ctor.prototype.constructor is not ctor");}}else{ctor.prototype.constructor=ctor;}}if(!ctor.prototype||(bctor&&!(ctor.prototype instanceof bctor))){proto=(bctor?new bctor():_create(null));if(ctor.prototype){for(key in ctor.prototype){proto[key]=ctor.prototype[key];}}proto.constructor=ctor;ctor.prototype=proto;}classes[name]={ctor:ctor,base:base,sub:[],ename:_replace(sep+name,/([\"\\])/g,"\\$1")};if(typeof base!=="undefined"){sub=classes[base].sub;if(Array_indexOf(sub,name)===-1){_push(sub,name);}sepBase=sep+base;for(cname in classes){proto=classes[cname].ctor.prototype;for(ometh in proto){if(!_hasOwnProperty(proto,ometh)){continue;}if(!String_indexOf(ometh,sepBase)){continue;}array=_split(ometh,sep);if(array[0]!==prefix){continue;}func=proto[ometh];indices=[];for(i=Array_indexOf(array,base,2);i!==-1;i=Array_indexOf(array,base,i+1)){_push(indices,i);}doit=function(i){if(i===indices.length){meth=_join(array,sep);if(meth!==ometh){opts.debug&&console.log(cname+'["'+meth+'"] propagated -> '+short_fn(func));proto[meth]=func;}return;}array[indices[i]]=base;doit(i+1);array[indices[i]]=name;doit(i+1);};doit(0);}}}return ctor;},defGeneric:function(fnName,ndisp,nargs){if(String_indexOf(fnName,sep)!=-1){throw _Error((sep==" "?"Space":"Separator")+" in function name: "+fnName);}nargs=nargs||ndisp;if(fnName==""||ndisp<1||ndisp!=(ndisp|0)||nargs<1||nargs!=(nargs|0)){throw Error("Usage: defGeneric(NAME, NDISP [, NARGS])");}var eName=_replace(sep+fnName,/([\"\\])/g,"\\$1");var eTopMethod=ePrefix+eName;for(var i=Formals.length;i<nargs;i++){Formals[i]="a"+i;}var array=_slice(Formals,0,nargs);_push(array,"return "+Formals[ndisp-1]+'["'+eTopMethod+'"]('+_join(_concat(_slice(array,0,ndisp-1),_slice(array,ndisp,nargs)),",")+")");var ret=_apply(_Function,null,array);var func_cache=_create(null);function get_func(i,etypes){var suffix=_join(_slice(etypes,i),"");if(!func_cache[suffix]){var method=ePrefix+eName+suffix;var array=_concat(_slice(Formals,0,i),_slice(Formals,i+1,nargs));_push(array,"return "+Formals[i-1]+'["'+method+'"]('+_join(_concat(_slice(Formals,0,i-1),"this",_slice(Formals,i+1,nargs)),",")+")");func_cache[suffix]=_apply(_Function,null,array);}return func_cache[suffix];}function usageArgs(){switch(ndisp){case 1:return"TYPE";case 2:return"TYPE1, TYPE2";case 3:return"TYPE1, TYPE2, TYPE3";default:return"TYPE1, ..., TYPE"+ndisp;}}function def(){var fn=arguments[ndisp]||pureVirtual;if(typeof fn!=="function"){throw _Error("Not a function.  Usage: "+fnName+".def("+usageArgs()+", FUNCTION)");}var types=_slice(arguments,0,ndisp);for(i=0;i<ndisp;i++){types[i]=assertClassToName(types[i]);}do_def(types,fn,_create(null));}function do_def(types,fn,inherited){var cs=new _Array(ndisp);var eTypes=new _Array(ndisp);var i,suffix,oldm,newm;for(i=0;i<ndisp;i++){cs[i]=classes[types[i]];eTypes[i]=cs[i].ename;}opts.debug&&console.log("do_def",fnName,eTypes);oldm=new Array(ndisp);for(i=ndisp-1,suffix="";;i--){oldm[i]=cs[i].ctor.prototype[prefix+sep+fnName+suffix];if(i===0){break;}suffix=eTypes[i]+suffix;}newm=new _Array(ndisp);newm[0]=fn;for(i=1;i<ndisp;i++){newm[i]=get_func(i,eTypes);}function doit(i,method){var key;var proto=cs[i].ctor.prototype;if(proto[method]&&proto[method]!==oldm[i]){opts.debug&&console.log("Skipping "+i+" "+types[i]+'["'+method+'"] '+short_fn(proto[method])+"!="+short_fn(oldm[i]));return;}if(proto===Object.prototype){throw Error("BUG: code would modify Object.prototype.");}if(proto[method]!==newm[i]){key=types[i]+sep+method;if((key in inherited)&&newm[i]===inherited[key]){opts.debug&&console.log(eTypes[i]+'["'+method+'"] '+short_fn(proto[method])+" -> DELETED");delete (proto[method]);}else{opts.debug&&console.log(eTypes[i]+'["'+method+'"] '+short_fn(proto[method])+" -> "+short_fn(newm[i]));if(!_hasOwnProperty(proto,method)){inherited[key]=proto[method];}proto[method]=newm[i];}}if(i===0){return;}function doit2(k){doit(i-1,method+sep+k);_forEach(classes[k].sub,doit2);}doit2(types[i]);}doit(ndisp-1,prefix+sep+fnName);}ret.def=def;return ret;}};if(opts.debug){ret.classes=classes;}return ret;}var ret=makeContext(Object.create(null));ret.makeContext=makeContext;return ret;})();function PluginContainer(init){if(!(this instanceof PluginContainer)){throw Error("Usage: new PluginContainer()");}var t=this,listeners=[],plugins=Object.create(null);function mergeChanges(from,to,changed){var ret=false;for(var i in from){if(to[i]!==undefined&&to[i]!==from[i]){throw Error("Conflicting changes to "+i);}if(changed){changed[i]=from[i];}to[i]=from[i];ret=true;}return ret;}var onChange={fire:function(changes){function notify(listener){listener.call(listener,t,changes);}forEachMethod(listeners,notify);},subscribe:function(listener){listeners.push(listener);},unsubscribe:function(listener){function isNotIt(l){return l!==listener;}listeners=listeners.filter(isNotIt);}};t.onChange=onChange;t.extend=function(){var changes=Object.create(null);var newPlugins=arguments[0],i;if(typeof newPlugins!=="object"){if(arguments.length&1){throw Error("extend: Wrong argument types");}newPlugins=Object.create(null);for(i=0;i<arguments.length;i+=2){if(arguments[i] in newPlugins){throw Error("extend: "+arguments[i]+" given more than once");}newPlugins[arguments[i]]=arguments[i+1];}}if(mergeChanges(newPlugins,plugins,changes)){onChange.fire(changes);}};t.get=function(pluginName){return plugins[pluginName];};t.list=function(){return Object.keys(plugins);};if(init){t.extend(init);}}function assert(x){if(!x){throw new Error("assertion failed");}}function getEs5Globals(){return{NaN:NaN,Infinity:Infinity,undefined:undefined,eval:eval,parseInt:parseInt,parseFloat:parseFloat,isNaN:isNaN,isFinite:isFinite,decodeURI:decodeURI,decodeURIComponent:decodeURIComponent,encodeURI:encodeURI,encodeURIComponent:encodeURIComponent,Object:Object,Function:Function,Array:Array,String:String,Boolean:Boolean,Number:Number,Date:Date,RegExp:RegExp,Error:Error,EvalError:EvalError,RangeError:RangeError,ReferenceError:ReferenceError,SyntaxError:SyntaxError,TypeError:TypeError,URIError:URIError,Math:Math,JSON:JSON};}function implementUncurry(plugins){var g=plugins.get("es5globals");var api=g.Object.create(null);api.uncurry=g.Function.prototype.bind.bind(g.Function.prototype.call);return api;}function defineGenericFunctions(plugins){var g=plugins.get("es5globals");var disp=plugins.get("Dispatch");var api=g.Object.create(null);function def(name,ndisp,nargs){api[name]=disp.defGeneric(name,ndisp,nargs);}def("toSchemeNumber",1);def("numberToString",1,3);def("isExact",1);def("isInexact",1);def("isComplex",1);def("isReal",1);def("isRational",1);def("isInteger",1);def("isZero",1);def("toExact",1);def("toInexact",1);def("negate",1);def("reciprocal",1);def("eq",2);def("ne",2);def("add",2);def("subtract",2);def("multiply",2);def("divide",2);def("square",1);def("realPart",1);def("imagPart",1);def("magnitude",1);def("angle",1);def("conjugate",1);def("expt",2);def("exp",1);def("sqrt",1);def("log",1);def("asin",1);def("acos",1);def("atan",1);def("sin",1);def("cos",1);def("tan",1);def("SN_isFinite",1);def("SN_isInfinite",1);def("SN_isNaN",1);def("isUnit",1);def("abs",1);def("isPositive",1);def("isNegative",1);def("sign",1);def("floor",1);def("ceiling",1);def("truncate",1);def("round",1);def("compare",2);def("gt",2);def("lt",2);def("ge",2);def("le",2);def("divAndMod",2);def("div",2);def("mod",2);def("atan2",2);def("numerator",1);def("denominator",1);def("numeratorAndDenominator",1);def("isEven",1);def("isOdd",1);def("exactIntegerSqrt",1);def("exp10",1,2);def("gcdNonnegative",2);def("divideReduced",2);def("bitwiseNot",1);def("bitwiseAnd",2);def("bitwiseIor",2);def("bitwiseXor",2);def("bitCount",1);def("bitLength",1);def("firstBitSet",1);def("isBitSet",1,2);def("copyBit",1,3);def("bitField",1,3);def("copyBitField",2,4);def("bitShift",1,2);def("rotateBitField",1,4);def("reverseBitField",1,3);return api;}function defineSchemeNumberType(plugins){var g=plugins.get("es5globals");var _NaN=g.NaN;var api=g.Object.create(null);var numberToString=plugins.get("numberToString");var disp=plugins.get("Dispatch");function SchemeNumberType(){}SchemeNumberType.prototype=new Number();function genericToString(radix){if(numberToString){return numberToString(this,radix);}return"[object SchemeNumber]";}function genericToLocaleString(){return genericToString();}function retNaN(){return _NaN;}function genericFormatter(){if(numberToString){return numberToString(this);}return"SchemeNumber";}SchemeNumberType.prototype.toFixed=genericFormatter;SchemeNumberType.prototype.toExponential=genericFormatter;SchemeNumberType.prototype.toPrecision=genericFormatter;SchemeNumberType.prototype.toString=genericToString;SchemeNumberType.prototype.toLocaleString=genericToLocaleString;SchemeNumberType.prototype.valueOf=retNaN;disp.defClass("SchemeNumber",{ctor:SchemeNumberType});api.SchemeNumberType=SchemeNumberType;return api;}function defineDebugFunction(plugins){var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var disp=plugins.get("Dispatch");var SchemeNumberType=plugins.get("SchemeNumberType");var Object_toString=uncurry(g.Object.prototype.toString);var api=g.Object.create(null);function SchemeNumber_debug(){var t;try{t=this.toString();}catch(e){try{t=Object_toString(this);}catch(e){t="?";}}return"SchemeNumber("+t+")";}api.debug=disp.defGeneric("debug",1);api.debug.def(SchemeNumberType,SchemeNumber_debug);return api;}function implementCoreLibrary(plugins){var SchemeNumber,toSchemeNumber,SchemeNumberType,Complex,Real,InexactReal,ExactReal,ExactRational,ExactInteger,numberToString,isExact,isInexact,isComplex,isReal,isRational,isInteger,isZero,toExact,toInexact,negate,reciprocal,eq,ne,add,subtract,multiply,divide,square,realPart,imagPart,expt,expt,exp,magnitude,angle,sqrt,log,asin,acos,atan,sin,cos,tan,SN_isFinite,SN_isInfinite,SN_isNaN,isUnit,abs,isPositive,isNegative,sign,floor,ceiling,truncate,round,compare,gt,lt,ge,le,divAndMod,div,mod,atan2,numerator,denominator,numeratorAndDenominator,isEven,isOdd,exp10,gcdNonnegative,divideReduced;SchemeNumber=plugins.get("SchemeNumber");SchemeNumberType=plugins.get("SchemeNumberType");Complex=plugins.get("Complex");Real=plugins.get("Real");InexactReal=plugins.get("InexactReal");ExactReal=plugins.get("ExactReal");ExactRational=plugins.get("ExactRational");ExactInteger=plugins.get("ExactInteger");toSchemeNumber=plugins.get("toSchemeNumber");numberToString=plugins.get("numberToString");isExact=plugins.get("isExact");isInexact=plugins.get("isInexact");isComplex=plugins.get("isComplex");isReal=plugins.get("isReal");isRational=plugins.get("isRational");isInteger=plugins.get("isInteger");isZero=plugins.get("isZero");toExact=plugins.get("toExact");toInexact=plugins.get("toInexact");negate=plugins.get("negate");reciprocal=plugins.get("reciprocal");eq=plugins.get("eq");ne=plugins.get("ne");add=plugins.get("add");subtract=plugins.get("subtract");multiply=plugins.get("multiply");divide=plugins.get("divide");square=plugins.get("square");realPart=plugins.get("realPart");imagPart=plugins.get("imagPart");expt=plugins.get("expt");expt=plugins.get("expt");exp=plugins.get("exp");magnitude=plugins.get("magnitude");angle=plugins.get("angle");sqrt=plugins.get("sqrt");log=plugins.get("log");asin=plugins.get("asin");acos=plugins.get("acos");atan=plugins.get("atan");sin=plugins.get("sin");cos=plugins.get("cos");tan=plugins.get("tan");SN_isFinite=plugins.get("SN_isFinite");SN_isInfinite=plugins.get("SN_isInfinite");SN_isNaN=plugins.get("SN_isNaN");isUnit=plugins.get("isUnit");abs=plugins.get("abs");isPositive=plugins.get("isPositive");isNegative=plugins.get("isNegative");sign=plugins.get("sign");floor=plugins.get("floor");ceiling=plugins.get("ceiling");truncate=plugins.get("truncate");round=plugins.get("round");compare=plugins.get("compare");gt=plugins.get("gt");lt=plugins.get("lt");ge=plugins.get("ge");le=plugins.get("le");divAndMod=plugins.get("divAndMod");div=plugins.get("div");mod=plugins.get("mod");atan2=plugins.get("atan2");numerator=plugins.get("numerator");denominator=plugins.get("denominator");numeratorAndDenominator=plugins.get("numeratorAndDenominator");isEven=plugins.get("isEven");isOdd=plugins.get("isOdd");exp10=plugins.get("exp10");gcdNonnegative=plugins.get("gcdNonnegative");divideReduced=plugins.get("divideReduced");var nativeToInexact,parseInexact;var parseExactInteger,nativeToExactInteger;var divideReducedNotByOne;var exactRectangular,inexactRectangular,exactPolar,inexactPolar;var ZERO,ONE,TWO,MINUS_ONE,I,MINUS_I;var INEXACT_ZERO,INEXACT_ONE,PI,INFINITY,MINUS_INFINITY,NAN;var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var Array_slice=uncurry(g.Array.prototype.slice);var Array_join=uncurry(g.Array.prototype.join);var Number_toString=uncurry(g.Number.prototype.toString);var String_indexOf=uncurry(g.String.prototype.indexOf);var String_substring=uncurry(g.String.prototype.substring);var String_replace=uncurry(g.String.prototype.replace);var RegExp_test=uncurry(g.RegExp.prototype.test);var Math_LN10=g.Math.LN10;var Math_LN2=g.Math.LN2;var Math_PI=g.Math.PI;var Math_abs=g.Math.abs;var Math_floor=g.Math.floor;var Math_pow=g.Math.pow;var _LN2=g.Math.LN2;var _LN10=g.Math.LN10;var _PI=g.Math.PI;var _undefined=g.undefined;var _Infinity=g.Infinity;var _NaN=g.NaN;var _parseInt=g.parseInt;var _isNaN=g.isNaN;var _isFinite=g.isFinite;var api=g.Object.create(null);function onPluginsChanged(plugins,changed){nativeToExactInteger=plugins.get("nativeToExactInteger");parseExactInteger=plugins.get("parseExactInteger");nativeToInexact=plugins.get("nativeToInexact");parseInexact=plugins.get("parseInexact");divideReducedNotByOne=plugins.get("divideReducedNotByOne");exactRectangular=plugins.get("exactRectangular");inexactRectangular=plugins.get("inexactRectangular");exactPolar=plugins.get("exactPolar");inexactPolar=plugins.get("inexactPolar");function getComplexConstant(x,y){try{return exactRectangular(nativeToExactInteger(x),nativeToExactInteger(y));}catch(e){return _undefined;}}var exts=g.Object.create(null);if(changed.nativeToExactInteger||changed.exactRectangular){I=exts.I=getComplexConstant(0,1);MINUS_I=exts.MINUS_I=getComplexConstant(0,-1);}if(changed.nativeToExactInteger){ZERO=exts.ZERO=nativeToExactInteger(0);ONE=exts.ONE=nativeToExactInteger(1);TWO=exts.TWO=nativeToExactInteger(2);MINUS_ONE=exts.MINUS_ONE=nativeToExactInteger(-1);}if(changed.nativeToInexact){INEXACT_ZERO=exts.INEXACT_ZERO=nativeToInexact(0);INEXACT_ONE=exts.INEXACT_ONE=nativeToInexact(1);PI=exts.PI=nativeToInexact(Math_PI);INFINITY=exts.INFINITY=nativeToInexact(_Infinity);MINUS_INFINITY=exts.MINUS_INFINITY=nativeToInexact(-_Infinity);NAN=exts.NAN=nativeToInexact(_NaN);}plugins.extend(exts);}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins,{});function retFalse(){return false;}function retTrue(){return true;}function retThis(){return this;}function retZero(){return ZERO;}function retOne(){return ONE;}function retFirst(a){return a;}function makeRectangular(x,y){if(isInexact(x)){return inexactRectangular(x,toInexact(y));}if(isInexact(y)){return inexactRectangular(toInexact(x),y);}return exactRectangular(x,y);}function makePolar(x,y){if(isInexact(x)){return inexactPolar(x,toInexact(y));}if(isInexact(y)){return inexactPolar(toInexact(x),y);}return exactPolar(x,y);}function defaultRaise(conditionType,message,irritant){var i,arg,msg="SchemeNumber: "+conditionType+": "+message;if(arguments.length>2){msg+=": ";i=2;while(true){arg=arguments[i];try{msg+=numberToString(arg);}catch(e){try{msg+=arg;}catch(e){msg+="?";}}i++;if(i===arguments.length){break;}msg+=", ";}}throw new g.Error(msg);}function raise(){var args=Array_slice(arguments);SchemeNumber.raise.apply(SchemeNumber,args);defaultRaise.apply(this,args);}function raiseDivisionByExactZero(){raise("&assertion","division by exact zero");}function truncateToPrecision(x,precision,exact){if(x===false||!isReal(x)){lose();}if(!isZero(x)){var xabs=abs(x);var shift=precision-Math_floor(log(xabs)/Math_LN2)-1;var scale=expt(TWO,nativeToExactInteger(Math_abs(shift)));if(shift<0){scale=reciprocal(scale);}var shifted=multiply(xabs,scale);var denom=expt(TWO,nativeToExactInteger(precision));while(ge(shifted,denom)){shifted=divide(shifted,TWO);scale=divide(scale,TWO);}for(var twiceShifted=add(shifted,shifted);lt(twiceShifted,denom);twiceShifted=add(shifted,shifted)){shifted=twiceShifted;scale=add(scale,scale);}var rounded=divide(round(shifted),scale);if(isNegative(x)){rounded=negate(rounded);}x=rounded;}if(!exact){x=toInexact(x);}return x;}function assertReal(x){if(!isReal(x)){raise("&assertion","not a real number",x);}return x;}function toReal(x){x=SchemeNumber(x);isReal(x)||assertReal(x);return x;}function assertRational(q){if(!isRational(q)){raise("&assertion","not a rational number",q);}return q;}function toRational(q){q=SchemeNumber(q);isRational(q)||assertRational(q);return q;}function assertInteger(n){n=SchemeNumber(n);if(!isInteger(n)){raise("&assertion","not an integer",n);}return n;}function toInteger(n){n=SchemeNumber(n);isInteger(n)||assertInteger(n);return n;}function assertExact(z){if(isInexact(z)){raise("&assertion","inexact number",z);}return z;}function isNumber(x){return x instanceof SchemeNumberType;}var decimalComplex=/^(.*[^a-zA-Z]|)([-+].*)i$/;var radixComplex=/^(.*)([-+].*)i$/;var nanInfPattern=/^[-+](nan|inf)\.0$/;var exponentMarkerPattern=/[eEsSfFdDlL]/;var decimal10Pattern=/^([0-9]+\.?|[0-9]*\.[0-9]+)([eEsSfFdDlL][-+]?[0-9]+)?$/;var uintegerPattern={2:/^[01]+$/,8:/^[0-7]+$/,10:/^[0-9]+$/,16:/^[0-9a-fA-F]+$/};var PARSE_ERROR=new g.Object();function stringToNumber(s,radix,exact){function lose(){throw PARSE_ERROR;}function check(z){return z===false?lose():z;}function setExact(value){if(exact!==_undefined){lose();}exact=value;}function setRadix(value){if(radix){lose();}radix=value;}function parseUinteger(s,sign){if(!RegExp_test(uintegerPattern[radix],s)){lose();}if(exact===false){if(radix===10){return parseInexact(sign,s);}return toInexact(parseExactInteger(sign,s,radix));}return parseExactInteger(sign,s,radix);}function parseReal(s){if(RegExp_test(nanInfPattern,s)){if(exact){lose();}switch(s){case"+inf.0":return INFINITY;case"-inf.0":return MINUS_INFINITY;default:return NAN;}}var sign=1;switch(s[0]){case"-":sign=-1;case"+":s=String_substring(s,1);}var slash=String_indexOf(s,"/");if(slash!=-1){return divide(parseUinteger(String_substring(s,0,slash),sign),parseUinteger(String_substring(s,slash+1),1));}if(radix!==10){return parseUinteger(s,sign);}var pipe=String_indexOf(s,"|");if(pipe!==-1){var afterPipe=String_substring(s,pipe+1);if(!RegExp_test(uintegerPattern[10],afterPipe)){lose();}s=String_substring(s,0,pipe);var precision=_parseInt(afterPipe,10);if(precision===0){s="0.0";}else{if(precision<53){return check(truncateToPrecision(stringToNumber(s,radix,true),precision,exact));}}}s=String_replace(s,exponentMarkerPattern,"e");var dot=String_indexOf(s,".");var e=String_indexOf(s,"e");if(dot===-1&&e===-1){return parseUinteger(s,sign);}if(!RegExp_test(decimal10Pattern,s)){lose();}if(!exact){return parseInexact(sign,s);}var integer=String_substring(s,0,dot===-1?e:dot);var exponent=ZERO;var fraction;if(e===-1){fraction=String_substring(s,dot+1);}else{if(dot===-1){fraction="";}else{fraction=String_substring(s,dot+1,e);}exponent=parseReal(String_substring(s,e+1));}return exp10(parseExactInteger(sign,integer+fraction),subtract(exponent,nativeToExactInteger(fraction.length)));}function parseComplex(s){var a=String_indexOf(s,"@");if(a!==-1){var ret=makePolar(parseReal(String_substring(s,0,a)),parseReal(String_substring(s,a+1)));if(exact&&isInexact(ret)){ret=ret;}return ret;}if(s[s.length-1]!=="i"){return parseReal(s);}if(s==="i"){if(exact===false){return inexactRectangular(INEXACT_ZERO,INEXACT_ONE);}return I;}if(s==="-i"){if(exact===false){return inexactRectangular(INEXACT_ZERO,negate(INEXACT_ONE));}return MINUS_I;}var match=(radix===10?decimalComplex:radixComplex).exec(s);var x,y;if(match){x=match[1];y=match[2];x=(x?parseReal(x):(exact===false?INEXACT_ZERO:ZERO));y=(y==="+"?ONE:(y==="-"?MINUS_ONE:parseReal(y)));}else{x=(exact===false?INEXACT_ZERO:ZERO);y=parseReal(String_substring(s,0,s.length-1));}return makeRectangular(x,y);}if(!radix||radix===10){if(RegExp_test(/^-?[0-9]{1,15}$/,s)){if(exact===false){return nativeToInexact(_parseInt(s,10));}return nativeToExactInteger(_parseInt(s,10));}}var i=0;try{while(s[i]==="#"){switch(s[i+1]){case"i":case"I":setExact(false);break;case"e":case"E":setExact(true);break;case"b":case"B":setRadix(2);break;case"o":case"O":setRadix(8);break;case"d":case"D":setRadix(10);break;case"x":case"X":setRadix(16);break;default:return false;}i+=2;}radix=radix||10;return parseComplex(String_substring(s,i));}catch(e){if(e===PARSE_ERROR){return false;}if(s==_undefined){raise("&assertion","missing argument");}throw e;}}api.I=I;api.ZERO=ZERO;api.ONE=ONE;api.TWO=TWO;api.MINUS_ONE=MINUS_ONE;api.INEXACT_ZERO=INEXACT_ZERO;api.INEXACT_ONE=INEXACT_ONE;api.PI=PI;api.INFINITY=INFINITY;api.MINUS_INFINITY=MINUS_INFINITY;api.NAN=NAN;api.raise=raise;api.defaultRaise=defaultRaise;api.raiseDivisionByExactZero=raiseDivisionByExactZero;api.stringToNumber=stringToNumber;api.isNumber=isNumber;api.assertReal=assertReal;api.toReal=toReal;api.assertRational=assertRational;api.toRational=toRational;api.assertInteger=assertInteger;api.toInteger=toInteger;api.assertExact=assertExact;api.makeRectangular=makeRectangular;api.makePolar=makePolar;api.truncateToPrecision=truncateToPrecision;api.retFalse=retFalse;api.retTrue=retTrue;api.retThis=retThis;api.retZero=retZero;api.retOne=retOne;api.retFirst=retFirst;return api;}function implementRnrsBase(plugins){var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var SchemeNumber,stringToNumber,ZERO,ONE,MINUS_ONE,INEXACT_ZERO,NAN,raise,isNumber,assertReal,toReal,toRational,toInteger,assertExact,makeRectangular,makePolar;var numberToString,isExact,isInexact,isComplex,isReal,isRational,isInteger,isZero,toExact,toInexact,negate,reciprocal,eq,ne,add,subtract,multiply,divide,realPart,imagPart,expt,exp,magnitude,angle,sqrt,log,asin,acos,atan,sin,cos,tan,SN_isFinite,SN_isInfinite,SN_isNaN,abs,isPositive,isNegative,floor,ceiling,truncate,round,compare,gt,lt,ge,le,divAndMod,div,mod,atan2,numerator,denominator,isEven,isOdd,exactIntegerSqrt,gcdNonnegative;var Array_push=uncurry(g.Array.prototype.push);SchemeNumber=plugins.get("SchemeNumber");numberToString=plugins.get("numberToString");isExact=plugins.get("isExact");isInexact=plugins.get("isInexact");isComplex=plugins.get("isComplex");isReal=plugins.get("isReal");isRational=plugins.get("isRational");isInteger=plugins.get("isInteger");isZero=plugins.get("isZero");toExact=plugins.get("toExact");toInexact=plugins.get("toInexact");negate=plugins.get("negate");reciprocal=plugins.get("reciprocal");eq=plugins.get("eq");ne=plugins.get("ne");add=plugins.get("add");subtract=plugins.get("subtract");multiply=plugins.get("multiply");divide=plugins.get("divide");realPart=plugins.get("realPart");imagPart=plugins.get("imagPart");expt=plugins.get("expt");exp=plugins.get("exp");magnitude=plugins.get("magnitude");angle=plugins.get("angle");sqrt=plugins.get("sqrt");log=plugins.get("log");asin=plugins.get("asin");acos=plugins.get("acos");atan=plugins.get("atan");sin=plugins.get("sin");cos=plugins.get("cos");tan=plugins.get("tan");SN_isFinite=plugins.get("SN_isFinite");SN_isInfinite=plugins.get("SN_isInfinite");SN_isNaN=plugins.get("SN_isNaN");abs=plugins.get("abs");isPositive=plugins.get("isPositive");isNegative=plugins.get("isNegative");floor=plugins.get("floor");ceiling=plugins.get("ceiling");truncate=plugins.get("truncate");round=plugins.get("round");compare=plugins.get("compare");gt=plugins.get("gt");lt=plugins.get("lt");ge=plugins.get("ge");le=plugins.get("le");divAndMod=plugins.get("divAndMod");div=plugins.get("div");mod=plugins.get("mod");atan2=plugins.get("atan2");numerator=plugins.get("numerator");denominator=plugins.get("denominator");isEven=plugins.get("isEven");isOdd=plugins.get("isOdd");exactIntegerSqrt=plugins.get("exactIntegerSqrt");gcdNonnegative=plugins.get("gcdNonnegative");stringToNumber=plugins.get("stringToNumber");function onPluginsChanged(plugins){ZERO=plugins.get("ZERO");ONE=plugins.get("ONE");MINUS_ONE=plugins.get("MINUS_ONE");INEXACT_ZERO=plugins.get("INEXACT_ZERO");NAN=plugins.get("NAN");raise=plugins.get("raise");isNumber=plugins.get("isNumber");assertReal=plugins.get("assertReal");toReal=plugins.get("toReal");toRational=plugins.get("toRational");toInteger=plugins.get("toInteger");assertExact=plugins.get("assertExact");makeRectangular=plugins.get("makeRectangular");makePolar=plugins.get("makePolar");}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins);var fn={"eqv?":fn_isEqv,"number?":fn_isNumber,"complex?":fn_isComplex,"real?":fn_isReal,"rational?":fn_isRational,"integer?":fn_isInteger,"real-valued?":fn_isRealValued,"rational-valued?":fn_isRationalValued,"integer-valued?":fn_isIntegerValued,"exact?":makeUnary(SchemeNumber,isExact),"inexact?":makeUnary(SchemeNumber,isInexact),inexact:makeUnary(SchemeNumber,toInexact),exact:makeUnary(SchemeNumber,toExact),"=":fn_equals,"<":makeComparator(lt),">":makeComparator(gt),"<=":makeComparator(le),">=":makeComparator(ge),"zero?":makeUnary(SchemeNumber,isZero),"positive?":makeUnary(toReal,isPositive),"negative?":makeUnary(toReal,isNegative),"odd?":makeUnary(toInteger,isOdd),"even?":makeUnary(toInteger,isEven),"finite?":makeUnary(toReal,SN_isFinite),"infinite?":makeUnary(toReal,SN_isInfinite),"nan?":makeUnary(toReal,SN_isNaN),max:makeMaxMin(gt),min:makeMaxMin(lt),"+":function(){var ret=ZERO;var len=arguments.length;var i=0;while(i<len){ret=add(ret,SchemeNumber(arguments[i++]));}return ret;},"*":function(){var ret=ONE;var len=arguments.length;var i=0;while(i<len){ret=multiply(ret,SchemeNumber(arguments[i++]));}return ret;},"-":function(a){var len=arguments.length;switch(len){case 0:args1plus(arguments);case 1:return negate(SchemeNumber(a));}var ret=SchemeNumber(a);var i=1;while(i<len){ret=subtract(ret,SchemeNumber(arguments[i++]));}return ret;},"/":function(a){var len=arguments.length;switch(len){case 0:args1plus(arguments);case 1:return reciprocal(SchemeNumber(a));case 2:return divide(SchemeNumber(a),SchemeNumber(arguments[1]));}var product=ONE;var i=1;while(i<len){product=multiply(product,SchemeNumber(arguments[i++]));}return divide(SchemeNumber(a),product);},abs:makeUnary(toReal,abs),"div-and-mod":makeDivMod(false,2),div:makeDivMod(false,0),mod:makeDivMod(false,1),"div0-and-mod0":makeDivMod(true,2),div0:makeDivMod(true,0),mod0:makeDivMod(true,1),gcd:function(){var ret=ZERO;var len=arguments.length;var exact=true;for(var i=0;i<len;i++){var arg=toInteger(arguments[i]);exact=exact&&isExact(arg);ret=gcdNonnegative(ret,toExact(abs(arg)));}ret=abs(ret);return(exact?ret:toInexact(ret));},lcm:function(){var ret=ONE;var len=arguments.length;var exact=true;for(var i=0;i<len;i++){var arg=toInteger(arguments[i]);exact=exact&&isExact(arg);arg=toExact(abs(arg));ret=divide(multiply(ret,arg),gcdNonnegative(ret,abs(arg)));}return(exact?ret:toInexact(ret));},numerator:makeUnary(toRational,numerator),denominator:makeUnary(toRational,denominator),floor:makeUnary(toReal,floor),ceiling:makeUnary(toReal,ceiling),truncate:makeUnary(toReal,truncate),round:makeUnary(toReal,round),rationalize:rationalize,exp:makeUnary(SchemeNumber,exp),log:function(z,base){var ret=log(SchemeNumber(z));switch(arguments.length){case 2:ret=divide(ret,log(SchemeNumber(base)));case 1:return ret;default:wrongArgCount("1-2",arguments);}},sin:makeUnary(SchemeNumber,sin),cos:makeUnary(SchemeNumber,cos),tan:makeUnary(SchemeNumber,tan),asin:makeUnary(SchemeNumber,asin),acos:makeUnary(SchemeNumber,acos),atan:function(y,x){switch(arguments.length){case 1:return atan(SchemeNumber(y));case 2:return atan2(toReal(y),toReal(x));default:wrongArgCount("1-2",arguments);}},sqrt:makeUnary(SchemeNumber,sqrt),"exact-integer-sqrt":makeUnary(toInteger,exactIntegerSqrt),expt:function(a,b){arguments.length===2||args2(arguments);return expt(SchemeNumber(a),SchemeNumber(b));},"make-rectangular":function(x,y){arguments.length===2||args2(arguments);return makeRectangular(toReal(x),toReal(y));},"make-polar":function(r,theta){arguments.length===2||args2(arguments);return makePolar(toReal(r),toReal(theta));},"real-part":makeUnary(SchemeNumber,realPart),"imag-part":makeUnary(SchemeNumber,imagPart),magnitude:makeUnary(SchemeNumber,magnitude),angle:makeUnary(SchemeNumber,angle),"number->string":function(z,radix,precision){var r=radix;switch(arguments.length){case 3:precision=toInteger(precision);assertExact(precision);case 2:r=assertExact(toInteger(r)).valueOf();if(r!==10&&r!==16&&r!==8&&r!==2){raise("&assertion","invalid radix",radix);}case 1:break;default:wrongArgCount("1-3",arguments);}return numberToString(SchemeNumber(z),r,precision);},"string->number":function(s,radix){switch(arguments.length){case 1:case 2:return stringToNumber(String(s),radix);default:wrongArgCount("1-2",arguments);}}};function wrongArgCount(expected,a){var msg="Function";var called;try{called=a.callee;}catch(e){}if(called){for(name in fn){if(fn[name]===called){msg+=" '"+name+"'";break;}}}raise("&assertion",msg+" expected "+expected+" argument"+(expected=="1"?"":"s")+", got "+a.length);}function args1(a){a.length===1||wrongArgCount(1,a);}function args2(a){a.length===2||wrongArgCount(2,a);}function args1plus(a){a.length>0||wrongArgCount("1 or more",a);}function args2plus(a){a.length>1||wrongArgCount("2 or more",a);}function fn_isEqv(a,b){arguments.length===2||args2(arguments);if(a===b){return true;}if(!isNumber(a)||!isNumber(b)){return false;}return(eq(a,b)&&isExact(a)===isExact(b));}function fn_isNumber(x){arguments.length===1||args1(arguments);return isNumber(x);}function fn_isComplex(x){arguments.length===1||args1(arguments);return isNumber(x)&&isComplex(x);}function fn_isReal(x){arguments.length===1||args1(arguments);return isNumber(x)&&isReal(x);}function fn_isRational(x){arguments.length===1||args1(arguments);return isNumber(x)&&isRational(x);}function fn_isInteger(x){arguments.length===1||args1(arguments);return isNumber(x)&&isInteger(x);}function fn_isRealValued(x){arguments.length===1||args1(arguments);return isNumber(x)&&isComplex(x)&&isZero(imagPart(x));}function fn_isRationalValued(x){arguments.length===1||args1(arguments);return fn_isRealValued(x)&&isRational(realPart(x));}function fn_isIntegerValued(x){arguments.length===1||args1(arguments);return fn_isRealValued(x)&&isInteger(realPart(x));}function fn_equals(a,b){var len=arguments.length;len>1||args2plus(arguments);a=SchemeNumber(a);for(var i=1;i<len;i++){if(!eq(a,SchemeNumber(arguments[i]))){return false;}}return true;}function makeUnary(conv,func){function unary(a){arguments.length===1||args1(arguments);return func(conv(a));}return unary;}function makeComparator(cmp){function comparator(a,b){var len=arguments.length;len>1||args2plus(arguments);b=toReal(b);if(!cmp(toReal(a),b)){return false;}for(var i=2;i<len;i++){var c=toReal(arguments[i]);if(!cmp(b,c)){return false;}b=c;}return true;}return comparator;}function makeMaxMin(cmp){function maxMin(a){var len=arguments.length;len>0||args1plus(arguments);var ret=toReal(a);var exact=isExact(ret);for(var i=1;i<len;i++){var x=toReal(arguments[i]);if(SN_isNaN(x)){return x;}if(exact){exact=isExact(x);if(!exact){ret=toInexact(ret);}}if(cmp(x,ret)!==false){ret=x;}}return exact?ret:toInexact(ret);}return maxMin;}function makeDivMod(is0,which){function divMod(x,y){arguments.length===2||args2(arguments);x=toReal(x);y=toReal(y);if(!SN_isFinite(x)){raise("&assertion","div/mod first argument is not finite",x);}if(isZero(y)){raise("&assertion","div/mod second argument is zero",y);}if(!is0){switch(which){case 0:return div(x,y);case 1:return mod(x,y);case 2:default:return divAndMod(x,y);}}var dm=divAndMod(x,y);var m=dm[1];var yabs=abs(y);if(ge(add(m,m),yabs)){switch(which){case 0:return add(dm[0],isNegative(y)?MINUS_ONE:ONE);case 1:return subtract(m,yabs);case 2:default:return[add(dm[0],isNegative(y)?MINUS_ONE:ONE),subtract(m,yabs)];}}switch(which){case 0:return dm[0];case 1:return m;case 2:default:return dm;}}return divMod;}function rationalize(x,delta){args2(arguments);x=SchemeNumber(x);delta=SchemeNumber(delta);if(!SN_isFinite(x)||!SN_isFinite(delta)){assertReal(x);assertReal(delta);if(SN_isInfinite(delta)){return(SN_isFinite(x)?INEXACT_ZERO:NAN);}if(SN_isNaN(delta)){return delta;}return x;}if(isZero(delta)){return x;}delta=abs(delta);var inexact=isInexact(x)||isInexact(delta);if(inexact){x=toExact(x);delta=toExact(delta);}var x0=subtract(x,delta);var x1=add(x,delta);var a=floor(x0);var b=floor(x1);if(ne(a,b)){var negative=isNegative(a);if(isNegative(b)!=negative){return(inexact?INEXACT_ZERO:ZERO);}a=(negative?b:ceiling(x0));return inexact?toInexact(a):a;}var cf=[];while(true){x0=subtract(x0,a);if(isZero(x0)){break;}x1=subtract(x1,a);if(isZero(x1)){break;}x0=reciprocal(x0);x1=reciprocal(x1);a=floor(x0);switch(compare(a,floor(x1))){case -1:Array_push(cf,ceiling(x0));break;case 1:Array_push(cf,ceiling(x1));break;case 0:default:Array_push(cf,a);continue;}break;}var ret=ZERO;var i=cf.length;while(i--){ret=reciprocal(add(ret,cf[i]));}ret=add(ret,b);return(inexact?toInexact(ret):ret);}var api=g.Object.create(null);for(var i in fn){if(g.Object.prototype.hasOwnProperty.call(fn,i)){api[i]=fn[i];}}return api;}function implementSchemeNumber(plugins){var SchemeNumberType,nativeToInexact,stringToNumber,toSchemeNumber,raise;function SchemeNumber(obj){var ret;if(obj instanceof SchemeNumberType){return obj;}if(typeof obj==="string"){ret=stringToNumber(obj);if(ret===false){raise("&assertion","not a number",obj);}return ret;}if(typeof obj==="number"){return nativeToInexact(obj);}try{return toSchemeNumber(obj);}catch(e){raise("&assertion","not a number",obj,e);}}SchemeNumber.VERSION=[1,3,2];SchemeNumber.fn=undefined;SchemeNumber.raise=undefined;SchemeNumber.maxIntegerDigits=1000000;SchemeNumber.plugins=plugins;function onPluginsChanged(plugins){SchemeNumberType=plugins.get("SchemeNumberType");nativeToInexact=plugins.get("nativeToInexact");stringToNumber=plugins.get("stringToNumber");toSchemeNumber=plugins.get("toSchemeNumber");raise=plugins.get("raise");}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins);return SchemeNumber;}function makeMinimalBase(){var SchemeNumber,debug;var disp=DispatchJs.makeContext({methodNamePrefix:"SN_",methodNameSeparator:" "});var plugins=new PluginContainer({Dispatch:disp,es5globals:getEs5Globals()});plugins.extend(implementUncurry(plugins));plugins.extend(defineGenericFunctions(plugins));plugins.extend(defineSchemeNumberType(plugins));plugins.extend(defineDebugFunction(plugins));SchemeNumber=implementSchemeNumber(plugins);plugins.extend("SchemeNumber",SchemeNumber);plugins.extend(implementCoreLibrary(plugins));SchemeNumber.raise=plugins.get("defaultRaise");SchemeNumber.fn=implementRnrsBase(plugins);return SchemeNumber;}function defineAbstractTypes(plugins){var g=plugins.get("es5globals");var api=g.Object.create(null);var SchemeNumberType=plugins.get("SchemeNumberType");function Complex(){}Complex.prototype=new SchemeNumberType();function Real(){}Real.prototype=new Complex();function InexactReal(){}InexactReal.prototype=new Real();function ExactReal(){}ExactReal.prototype=new Real();function ExactRational(){}ExactRational.prototype=new ExactReal();function ExactInteger(){}ExactInteger.prototype=new ExactRational();api.Complex=Complex;api.Real=Real;api.InexactReal=InexactReal;api.ExactReal=ExactReal;api.ExactRational=ExactRational;api.ExactInteger=ExactInteger;return api;}function installAbstractTypes(plugins){var disp=plugins.get("Dispatch");function def(name){disp.defClass(name,{ctor:plugins.get(name)});}def("Complex");def("Real");def("InexactReal");def("ExactReal");def("ExactRational");def("ExactInteger");}function installStubFunctions(plugins){var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var Function_apply=uncurry(g.Function.prototype.apply);var Array_concat=uncurry(g.Array.prototype.concat);var SchemeNumberType=plugins.get("SchemeNumberType");var Complex=plugins.get("Complex");var Real=plugins.get("Real");var InexactReal=plugins.get("InexactReal");var ExactReal=plugins.get("ExactReal");var ExactRational=plugins.get("ExactRational");var ExactInteger=plugins.get("ExactInteger");function def(name,types){var func=plugins.get(name);if(!func){console.log(name,"not found");return;}Function_apply(func.def,func,types);}def("numberToString",[SchemeNumberType]);def("isExact",[SchemeNumberType]);def("isInexact",[SchemeNumberType]);def("isComplex",[SchemeNumberType]);def("isReal",[SchemeNumberType]);def("isRational",[SchemeNumberType]);def("isInteger",[SchemeNumberType]);def("isZero",[SchemeNumberType]);def("toExact",[SchemeNumberType]);def("toInexact",[SchemeNumberType]);def("negate",[SchemeNumberType]);def("reciprocal",[SchemeNumberType]);def("eq",[SchemeNumberType,SchemeNumberType]);def("ne",[SchemeNumberType,SchemeNumberType]);def("add",[SchemeNumberType,SchemeNumberType]);def("subtract",[SchemeNumberType,SchemeNumberType]);def("multiply",[SchemeNumberType,SchemeNumberType]);def("divide",[SchemeNumberType,SchemeNumberType]);def("square",[SchemeNumberType]);def("realPart",[Complex]);def("imagPart",[Complex]);def("magnitude",[Complex]);def("angle",[Complex]);def("conjugate",[Complex]);def("expt",[SchemeNumberType,ExactInteger]);def("expt",[Complex,Complex]);def("exp",[Complex]);def("sqrt",[Complex]);def("log",[Complex]);def("asin",[Complex]);def("acos",[Complex]);def("atan",[Complex]);def("sin",[Complex]);def("cos",[Complex]);def("tan",[Complex]);def("SN_isFinite",[Real]);def("SN_isInfinite",[Real]);def("SN_isNaN",[Real]);def("isUnit",[Real]);def("abs",[Real]);def("isPositive",[Real]);def("isNegative",[Real]);def("sign",[Real]);def("floor",[Real]);def("ceiling",[Real]);def("truncate",[Real]);def("round",[Real]);def("compare",[Real,Real]);def("gt",[Real,Real]);def("lt",[Real,Real]);def("ge",[Real,Real]);def("le",[Real,Real]);def("divAndMod",[Real,Real]);def("div",[Real,Real]);def("mod",[Real,Real]);def("atan2",[Real,Real]);def("numerator",[ExactRational]);def("denominator",[ExactRational]);def("numeratorAndDenominator",[ExactRational]);def("isEven",[ExactInteger]);def("isOdd",[ExactInteger]);def("exactIntegerSqrt",[ExactInteger]);def("exp10",[ExactInteger]);def("gcdNonnegative",[ExactInteger,ExactInteger]);def("divideReduced",[ExactInteger,ExactInteger]);def("bitwiseNot",[ExactInteger]);def("bitwiseAnd",[ExactInteger,ExactInteger]);def("bitwiseIor",[ExactInteger,ExactInteger]);def("bitwiseXor",[ExactInteger,ExactInteger]);def("bitCount",[ExactInteger]);def("bitLength",[ExactInteger]);def("firstBitSet",[ExactInteger]);def("isBitSet",[ExactInteger]);def("copyBit",[ExactInteger]);def("bitField",[ExactInteger]);def("copyBitField",[ExactInteger,ExactInteger]);def("bitShift",[ExactInteger]);def("rotateBitField",[ExactInteger]);def("reverseBitField",[ExactInteger]);}function implementPluginLibrary(plugins){var SchemeNumber,toSchemeNumber,SchemeNumberType,Complex,Real,InexactReal,ExactReal,ExactRational,ExactInteger,numberToString,isExact,isInexact,isComplex,isReal,isRational,isInteger,isZero,toExact,toInexact,negate,reciprocal,eq,ne,add,subtract,multiply,divide,square,realPart,imagPart,expt,expt,exp,magnitude,angle,sqrt,log,asin,acos,atan,sin,cos,tan,SN_isFinite,SN_isInfinite,SN_isNaN,isUnit,abs,isPositive,isNegative,sign,floor,ceiling,truncate,round,compare,gt,lt,ge,le,divAndMod,div,mod,atan2,numerator,denominator,numeratorAndDenominator,isEven,isOdd,exp10,gcdNonnegative,divideReduced;SchemeNumber=plugins.get("SchemeNumber");SchemeNumberType=plugins.get("SchemeNumberType");Complex=plugins.get("Complex");Real=plugins.get("Real");InexactReal=plugins.get("InexactReal");ExactReal=plugins.get("ExactReal");ExactRational=plugins.get("ExactRational");ExactInteger=plugins.get("ExactInteger");toSchemeNumber=plugins.get("toSchemeNumber");numberToString=plugins.get("numberToString");isExact=plugins.get("isExact");isInexact=plugins.get("isInexact");isComplex=plugins.get("isComplex");isReal=plugins.get("isReal");isRational=plugins.get("isRational");isInteger=plugins.get("isInteger");isZero=plugins.get("isZero");toExact=plugins.get("toExact");toInexact=plugins.get("toInexact");negate=plugins.get("negate");reciprocal=plugins.get("reciprocal");eq=plugins.get("eq");ne=plugins.get("ne");add=plugins.get("add");subtract=plugins.get("subtract");multiply=plugins.get("multiply");divide=plugins.get("divide");square=plugins.get("square");realPart=plugins.get("realPart");imagPart=plugins.get("imagPart");expt=plugins.get("expt");expt=plugins.get("expt");exp=plugins.get("exp");magnitude=plugins.get("magnitude");angle=plugins.get("angle");sqrt=plugins.get("sqrt");log=plugins.get("log");asin=plugins.get("asin");acos=plugins.get("acos");atan=plugins.get("atan");sin=plugins.get("sin");cos=plugins.get("cos");tan=plugins.get("tan");SN_isFinite=plugins.get("SN_isFinite");SN_isInfinite=plugins.get("SN_isInfinite");SN_isNaN=plugins.get("SN_isNaN");isUnit=plugins.get("isUnit");abs=plugins.get("abs");isPositive=plugins.get("isPositive");isNegative=plugins.get("isNegative");sign=plugins.get("sign");floor=plugins.get("floor");ceiling=plugins.get("ceiling");truncate=plugins.get("truncate");round=plugins.get("round");compare=plugins.get("compare");gt=plugins.get("gt");lt=plugins.get("lt");ge=plugins.get("ge");le=plugins.get("le");divAndMod=plugins.get("divAndMod");div=plugins.get("div");mod=plugins.get("mod");atan2=plugins.get("atan2");numerator=plugins.get("numerator");denominator=plugins.get("denominator");numeratorAndDenominator=plugins.get("numeratorAndDenominator");isEven=plugins.get("isEven");isOdd=plugins.get("isOdd");exp10=plugins.get("exp10");gcdNonnegative=plugins.get("gcdNonnegative");divideReduced=plugins.get("divideReduced");var nativeToExactInteger,divideReducedNotByOne;var exactRectangular,inexactRectangular;var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var Array_join=uncurry(g.Array.prototype.join);var Number_toString=uncurry(g.Number.prototype.toString);var String_indexOf=uncurry(g.String.prototype.indexOf);var String_substring=uncurry(g.String.prototype.substring);var String_replace=uncurry(g.String.prototype.replace);var Math_LN10=g.Math.LN10;var Math_LN2=g.Math.LN2;var Math_abs=g.Math.abs;var Math_floor=g.Math.floor;var Math_pow=g.Math.pow;var _undefined=g.undefined;var _NaN=g.NaN;var _parseInt=g.parseInt;var _isFinite=g.isFinite;var ZERO,ONE,TWO,MINUS_ONE,I,MINUS_I,INEXACT_ZERO,INEXACT_ONE,PI;var makePolar=plugins.get("makePolar");var makeRectangular=plugins.get("makeRectangular");var raise=plugins.get("raise");var raiseDivisionByExactZero=plugins.get("raiseDivisionByExactZero");var api=g.Object.create(null);function onPluginsChanged(plugins,changed){nativeToExactInteger=plugins.get("nativeToExactInteger");divideReducedNotByOne=plugins.get("divideReducedNotByOne");exactRectangular=plugins.get("exactRectangular");inexactRectangular=plugins.get("inexactRectangular");ZERO=plugins.get("ZERO");ONE=plugins.get("ONE");TWO=plugins.get("TWO");MINUS_ONE=plugins.get("MINUS_ONE");INEXACT_ZERO=plugins.get("INEXACT_ZERO");INEXACT_ONE=plugins.get("INEXACT_ONE");PI=plugins.get("PI");I=plugins.get("I");MINUS_I=plugins.get("MINUS_I");}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins,{});function Complex_sqrt(){return makePolar(sqrt(magnitude(this)),divide(angle(this),TWO));}function Complex_exp(){return makePolar(exp(realPart(this)),imagPart(this));}function Complex_sin(){var iz=multiply(I,this);return multiply(divide(subtract(exp(iz),exp(negate(iz))),TWO),MINUS_I);}function Complex_cos(){var iz=multiply(I,this);return divide(add(exp(iz),exp(negate(iz))),TWO);}function Complex_expt_fn(b,p){if(isZero(b)){if(isZero(p)){return isExact(b)&&isExact(p)?ONE:INEXACT_ONE;}if(isPositive(realPart(p))){return isExact(p)?b:INEXACT_ZERO;}raise("&implementation-restriction","invalid power for zero expt",p);}return exp(multiply(log(b),p));}function Complex_asin_fn(z){return multiply(MINUS_I,log(add(multiply(I,z),sqrt(subtract(ONE,square(z))))));}function Complex_acos_fn(z){return subtract(divide(PI,TWO),Complex_asin_fn(z));}function Complex_atan_fn(z){var iz=multiply(I,z);return multiply(divide(subtract(log(add(ONE,iz)),log(subtract(ONE,iz))),TWO),MINUS_I);}function Complex_log_fn(z){return makeRectangular(log(magnitude(z)),angle(z));}function Complex_expt(p){return Complex_expt_fn(this,p);}function Complex_asin(){return Complex_asin_fn(this);}function Complex_acos(){return Complex_acos_fn(this);}function Complex_atan(){return Complex_atan_fn(this);}function Complex_log(){return Complex_log_fn(this);}function Complex_valueOf(){if(isZero(imagPart(this))){return realPart(this).valueOf();}return _NaN;}function xyToString(xString,yString){if(yString[0]==="-"||yString[0]==="+"){return xString+yString+"i";}return xString+"+"+yString+"i";}function Complex_numberToString(radix,precision){return xyToString(numberToString(realPart(this),radix,precision),numberToString(imagPart(this),radix,precision));}function Complex_toString(radix){radix=radix||10;return xyToString(realPart(this).toString(radix),imagPart(this).toString(radix));}function Complex_toFixed(dig){return xyToString(realPart(this).toFixed(dig),imagPart(this).toFixed(dig));}function Complex_toExponential(dig){return xyToString(realPart(this).toExponential(dig),imagPart(this).toExponential(dig));}function Complex_toPrecision(prec){return xyToString(realPart(this).toPrecision(prec),imagPart(this).toPrecision(prec));}function Complex_toInexact(){if(isInexact(this)){return this;}return inexactRectangular(toInexact(realPart(this)),toInexact(imagPart(this)));}function Complex_toExact(){if(isExact(this)){return this;}return exactRectangular(toExact(realPart(this)),toExact(imagPart(this)));}function Complex_isZero(){return isZero(realPart(this))&&isZero(imagPart(this));}function Complex_magnitude(){var x=realPart(this),y=imagPart(this);if(isZero(x)){return abs(y);}if(isZero(y)){return abs(x);}return sqrt(add(square(x),square(y)));}function Complex_angle(){return atan2(imagPart(this),realPart(this));}function Complex_eq(z){return(eq(realPart(this),realPart(z))&&eq(imagPart(this),imagPart(z)));}function Complex_eq_Real(x){return isZero(imagPart(this))&&eq(x,realPart(this));}function Real_eq_Complex(z){return isZero(imagPart(z))&&eq(realPart(z),this);}function Complex_ne(z){return(ne(realPart(this),realPart(z))||ne(imagPart(this),imagPart(z)));}function Complex_ne_Real(x){return !isZero(imagPart(this))||ne(x,realPart(this));}function Real_ne_Complex(z){return !isZero(imagPart(z))||ne(realPart(z),this);}function Real_add_Complex(z){return makeRectangular(add(this,realPart(z)),imagPart(z));}function Complex_add_Real(x){return makeRectangular(add(realPart(this),x),imagPart(this));}function Complex_add(z){return makeRectangular(add(realPart(this),realPart(z)),add(imagPart(this),imagPart(z)));}function Real_subtract_Complex(z){return makeRectangular(subtract(this,realPart(z)),negate(imagPart(z)));}function Complex_subtract_Real(x){return makeRectangular(subtract(realPart(this),x),imagPart(this));}function Complex_subtract(z){return makeRectangular(subtract(realPart(this),realPart(z)),subtract(imagPart(this),imagPart(z)));}function Complex_negate(){return makeRectangular(negate(realPart(this)),negate(imagPart(this)));}function complexMultiply(ax,ay,bx,by){return makeRectangular(subtract(multiply(ax,bx),multiply(ay,by)),add(multiply(ax,by),multiply(ay,bx)));}function Real_multiply_Complex(z){return makeRectangular(multiply(realPart(z),this),multiply(imagPart(z),this));}function Complex_multiply_Real(x){return makeRectangular(multiply(realPart(this),x),multiply(imagPart(this),x));}function Complex_multiply(z){return complexMultiply(realPart(this),imagPart(this),realPart(z),imagPart(z));}function Complex_divide_Real(x){return makeRectangular(divide(realPart(this),x),divide(imagPart(this),x));}function Complex_square(){var x=realPart(this),y=imagPart(this);var xy=multiply(x,y);return makeRectangular(subtract(square(x),square(y)),add(xy,xy));}function Complex_reciprocal(){var x=realPart(this),y=imagPart(this);var m2=add(square(x),square(y));return makeRectangular(divide(x,m2),negate(divide(y,m2)));}function complexDivide(x,y,z){var zx=realPart(z),zy=imagPart(z);var m2=add(square(zx),square(zy));return complexMultiply(x,y,divide(zx,m2),negate(divide(zy,m2)));}function Real_divide_Complex(z){return complexDivide(this,isExact(this)?ZERO:INEXACT_ZERO,z);}function Complex_divide(z){return complexDivide(realPart(this),imagPart(this),z);}function numberToBinary(x){return Number_toString(x,2);}function nativeDenominatorLog2(x){var s=numberToBinary(Math_abs(x));var i=String_indexOf(s,".");if(i===-1){return 0;}return s.length-i-1;}function nativeDenominator(x){return Math_pow(2,nativeDenominatorLog2(x));}function square_via_multiply(){return multiply(this,this);}function isInexact_via_isExact(){return !isExact(this);}function ne_via_eq(n){return !eq(this,n);}function subtract_via_negate_add(n){return add(this,negate(n));}function divide_via_reciprocal_multiply(n){return multiply(this,reciprocal(n));}function complex_or_exact_expt(n){if(isExact(this)){return expt_N_EI_fn(this,n);}return Complex_expt_fn(this,n);}function tan_via_divide_sin_cos(){return divide(sin(this),cos(this));}function isUnit_via_eq(){return eq(ONE,this)||eq(MINUS_ONE,this);}function Real_magnitude_via_abs(){return abs(this);}function InexactReal_angle_via_isNegative(){return isNegative(this)?PI:INEXACT_ZERO;}function ExactReal_angle_via_isNegative(){return isNegative(this)?PI:ZERO;}function isPositive_via_sign(){return sign(this)>0;}function isNegative_via_sign(){return sign(this)<0;}function isZero_via_sign(){return sign(this)===0;}function sign_via_compare(){return compare(this,ZERO);}function eq_via_compare(x){return compare(this,x)===0;}function ne_via_compare(x){return compare(this,x)!==0;}function gt_via_compare(x){return compare(this,x)>0;}function lt_via_compare(x){return compare(this,x)<0;}function ge_via_compare(x){return compare(this,x)>=0;}function le_via_compare(x){return compare(this,x)<=0;}function div_R_R(x,y){return(isNegative(y)?ceiling(divide(x,y)):floor(divide(x,y)));}function divAndMod_via_divide_floor(y){var div=div_R_R(this,y);return[div,subtract(this,multiply(div,y))];}function div_via_divide_floor(y){return div_R_R(this,y);}function mod_via_divide_floor(y){return subtract(this,multiply(div_R_R(this,y),y));}function abs_via_isNegative_negate(){return isNegative(this)?negate(this):this;}function ceiling_via_floor(){return isInteger(this)?this:add(ONE,floor(this));}function truncate_via_ceiling_floor(){return isNegative(this)?ceiling(this):floor(this);}function round_via_floor_compare_isEven(){var ret=floor(this);var diff=subtract(this,ret);var twice=add(diff,diff);switch(compare(twice,ONE)){case -1:return ret;case 1:return add(ONE,ret);case 0:default:return(isEven(ret)?ret:add(ONE,ret));}}function divideReduced_via_isUnit(d){if(isUnit(d)){return this;}return divideReducedNotByOne(this,d);}function Integer_divide_via_gcd_div(d){var n=this;var g=gcdNonnegative(abs(d),abs(n));n=div(n,g);d=div(d,g);if(isNegative(d)){n=negate(n);d=negate(d);}return(isUnit(d)?n:divideReducedNotByOne(n,d));}function Integer_reciprocal_via_divideReduced(){switch(sign(this)){case -1:return divideReduced(MINUS_ONE,negate(this));case 1:return divideReduced(ONE,this);case 0:default:return raiseDivisionByExactZero();}}function ExactRational_numberToString(radix){var nd=numeratorAndDenominator(this);var n=nd[0],d=nd[1];if(isUnit(d)){return numberToString(n,radix);}return(numberToString(n,radix)+"/"+numberToString(d,radix));}function Integer_numeratorAndDenominator(){return[this,ONE];}function genericExp10(p){return multiply(this,expt_N_EI_fn(nativeToExactInteger(10),p));}function expt_N_EI_fn(z,p){var bits=abs(p);var squarer=z;var ret=ONE;var dm;while(isPositive(bits)){dm=divAndMod(bits,TWO);bits=dm[0];if(!isZero(dm[1])){ret=multiply(ret,squarer);}squarer=square(squarer);}return(isNegative(p)?reciprocal(ret):ret);}function expt_N_EI(p){return expt_N_EI_fn(this,p);}function gcdNonnegative_via_isZero_mod(b){var a=this;var c;while(!isZero(a)){c=a;a=mod(b,a);b=c;}return b;}function bitwiseNot_via_subtract(){return subtract(MINUS_ONE,this);}function zeroes(count){var ret=String_substring("000000000000000",0,count&15);if(count>15){ret+=Array_join(new g.Array((count>>4)+1),"0000000000000000");}return ret;}function Real_toFixed(fractionDigits){var f=(fractionDigits===_undefined?0:_parseInt(fractionDigits,10));if(f>SchemeNumber.maxIntegerDigits){throw new RangeError("fractionDigits exceeds SchemeNumber.maxIntegerDigits: "+fractionDigits);}var x=this;var s="";if(isNegative(x)){x=negate(x);s="-";}var p=exp10(ONE,nativeToExactInteger(-f));var dm=divAndMod(x,p);var n=dm[0];if(ge(add(dm[1],dm[1]),p)){n=add(ONE,n);}if(isZero(n)){return s+"0"+(fractionDigits>0?"."+zeroes(fractionDigits):"");}n=numberToString(n);if(f===0){return s+n;}var z=f-n.length;if(f>0){if(z>=0){n=zeroes(z+1)+n;}var point=n.length-f;return s+String_substring(n,0,point)+"."+String_substring(n,point);}return s+n+zeroes(-f);}function Real_toExponential(fractionDigits){var f=(fractionDigits===_undefined?20:_parseInt(fractionDigits,10));if(f<0){throw new RangeError("SchemeNumber toExponential: negative argument: "+f);}if(f>SchemeNumber.maxIntegerDigits){throw new RangeError("fractionDigits exceeds SchemeNumber.maxIntegerDigits: "+fractionDigits);}var x=this;var s="";if(isNegative(x)){x=negate(x);s="-";}else{if(isZero(x)){return"0"+(fractionDigits>0?"."+zeroes(f):"")+"e+0";}}var e=Math_floor(log(x)/Math_LN10);var p=exp10(ONE,nativeToExactInteger(e-f));var dm=divAndMod(x,p);var n=dm[0];if(ge(add(dm[1],dm[1]),p)){n=add(ONE,n);}n=numberToString(n);if(n.length!=f+1){e+=n.length-(f+1);p=exp10(ONE,nativeToExactInteger(e-f));dm=divAndMod(x,p);n=dm[0];if(ge(add(dm[1],dm[1]),p)){n=add(ONE,n);}n=numberToString(n);if(n.length!=f+1){return numberToString(this);}}if(fractionDigits===_undefined){n=String_replace(n,/(\d)0+$/,"$1");}if(n.length>1){n=n[0]+"."+String_substring(n,1);}return s+n+"e"+(e<0?"":"+")+e;}function Real_toPrecision(precision){var p,x;if(precision===_undefined){x=toInexact(this);if(SN_isFinite(x)){return Number_toString(+x);}p=21;}else{p=_parseInt(precision,10);if(p<1){throw new RangeError("SchemeNumber toPrecision: expected a positive precision, got: "+precision);}if(p>SchemeNumber.maxIntegerDigits){throw new RangeError("precision exceeds SchemeNumber.maxIntegerDigits: "+precision);}}x=this;var s="";if(isNegative(x)){x=negate(x);s="-";}else{if(isZero(x)){return"0"+(p>1?"."+zeroes(p-1):"");}}var ret=x.toExponential(p-1);var eIndex=String_indexOf(ret,"e");var exponent=_parseInt(String_substring(ret,eIndex+1),10);if(exponent>=-6&&exponent<p){if(exponent===0){ret=String_substring(ret,0,eIndex);}else{ret=String_substring(ret,0,1)+(String_indexOf(ret,".")===-1?"":String_substring(ret,2,eIndex));if(exponent<0){ret="0."+zeroes(-1-exponent)+ret;}else{if(exponent<p-1){ret=(String_substring(ret,0,exponent+1)+"."+String_substring(ret,exponent+1));}}}}else{if(precision===_undefined){ret=String_replace(String_substring(ret,0,eIndex),/\.?0+/,"")+String_substring(ret,eIndex);}}return s+ret;}api.Complex_sqrt=Complex_sqrt;api.Complex_exp=Complex_exp;api.Complex_sin=Complex_sin;api.Complex_cos=Complex_cos;api.Complex_expt_fn=Complex_expt_fn;api.Complex_expt=Complex_expt;api.Complex_asin_fn=Complex_asin_fn;api.Complex_asin=Complex_asin;api.Complex_acos_fn=Complex_acos_fn;api.Complex_acos=Complex_acos;api.Complex_atan_fn=Complex_atan_fn;api.Complex_atan=Complex_atan;api.Complex_log_fn=Complex_log_fn;api.Complex_log=Complex_log;api.Complex_numberToString=Complex_numberToString;api.Complex_toString=Complex_toString;api.Complex_toFixed=Complex_toFixed;api.Complex_toExponential=Complex_toExponential;api.Complex_toPrecision=Complex_toPrecision;api.Complex_toInexact=Complex_toInexact;api.Complex_toExact=Complex_toExact;api.Complex_isZero=Complex_isZero;api.Complex_magnitude=Complex_magnitude;api.Complex_angle=Complex_angle;api.Complex_eq=Complex_eq;api.Complex_eq_Real=Complex_eq_Real;api.Real_eq_Complex=Real_eq_Complex;api.Complex_ne=Complex_ne;api.Complex_ne_Real=Complex_ne_Real;api.Real_ne_Complex=Real_ne_Complex;api.Real_add_Complex=Real_add_Complex;api.Complex_add_Real=Complex_add_Real;api.Complex_add=Complex_add;api.Real_subtract_Complex=Real_subtract_Complex;api.Complex_subtract_Real=Complex_subtract_Real;api.Complex_subtract=Complex_subtract;api.Complex_negate=Complex_negate;api.Real_multiply_Complex=Real_multiply_Complex;api.Complex_multiply_Real=Complex_multiply_Real;api.Complex_multiply=Complex_multiply;api.Complex_divide_Real=Complex_divide_Real;api.Complex_square=Complex_square;api.Complex_reciprocal=Complex_reciprocal;api.Real_divide_Complex=Real_divide_Complex;api.Complex_divide=Complex_divide;api.numberToBinary=numberToBinary;api.nativeDenominatorLog2=nativeDenominatorLog2;api.nativeDenominator=nativeDenominator;api.square_via_multiply=square_via_multiply;api.isInexact_via_isExact=isInexact_via_isExact;api.ne_via_eq=ne_via_eq;api.subtract_via_negate_add=subtract_via_negate_add;api.divide_via_reciprocal_multiply=divide_via_reciprocal_multiply;api.complex_or_exact_expt=complex_or_exact_expt;api.tan_via_divide_sin_cos=tan_via_divide_sin_cos;api.isUnit_via_eq=isUnit_via_eq;api.Real_magnitude_via_abs=Real_magnitude_via_abs;api.InexactReal_angle_via_isNegative=InexactReal_angle_via_isNegative;api.ExactReal_angle_via_isNegative=ExactReal_angle_via_isNegative;api.isPositive_via_sign=isPositive_via_sign;api.isNegative_via_sign=isNegative_via_sign;api.isZero_via_sign=isZero_via_sign;api.sign_via_compare=sign_via_compare;api.eq_via_compare=eq_via_compare;api.ne_via_compare=ne_via_compare;api.gt_via_compare=gt_via_compare;api.lt_via_compare=lt_via_compare;api.ge_via_compare=ge_via_compare;api.le_via_compare=le_via_compare;api.divAndMod_via_divide_floor=divAndMod_via_divide_floor;api.div_via_divide_floor=div_via_divide_floor;api.mod_via_divide_floor=mod_via_divide_floor;api.abs_via_isNegative_negate=abs_via_isNegative_negate;api.ceiling_via_floor=ceiling_via_floor;api.truncate_via_ceiling_floor=truncate_via_ceiling_floor;api.round_via_floor_compare_isEven=round_via_floor_compare_isEven;api.divideReduced_via_isUnit=divideReduced_via_isUnit;api.Integer_divide_via_gcd_div=Integer_divide_via_gcd_div;api.Integer_reciprocal_via_divideReduced=Integer_reciprocal_via_divideReduced;api.ExactRational_numberToString=ExactRational_numberToString;api.Integer_numeratorAndDenominator=Integer_numeratorAndDenominator;api.genericExp10=genericExp10;api.expt_N_EI_fn=expt_N_EI_fn;api.expt_N_EI=expt_N_EI;api.gcdNonnegative_via_isZero_mod=gcdNonnegative_via_isZero_mod;api.bitwiseNot_via_subtract=bitwiseNot_via_subtract;api.Real_toFixed=Real_toFixed;api.Real_toExponential=Real_toExponential;api.Real_toPrecision=Real_toPrecision;api.Complex_valueOf=Complex_valueOf;return api;}function installGenericFunctions(plugins){var SchemeNumberType=plugins.get("SchemeNumberType");var Complex=plugins.get("Complex");var Real=plugins.get("Real");var InexactReal=plugins.get("InexactReal");var ExactReal=plugins.get("ExactReal");var ExactRational=plugins.get("ExactRational");var ExactInteger=plugins.get("ExactInteger");var raise=plugins.get("raise");function def(generic,types,impl){var gen=plugins.get(generic);if(!gen){return;}var fn=undefined;if(impl){fn=plugins.get(impl);if(!fn){console.log(impl+" not defined");return;}}gen.def.apply(gen.def,types.concat(fn));}def("expt",[SchemeNumberType,ExactInteger],"expt_N_EI");def("square",[SchemeNumberType],"square_via_multiply");def("isInexact",[SchemeNumberType],"isInexact_via_isExact");def("ne",[SchemeNumberType,SchemeNumberType],"ne_via_eq");def("subtract",[SchemeNumberType,SchemeNumberType],"subtract_via_negate_add");def("divide",[SchemeNumberType,SchemeNumberType],"divide_via_reciprocal_multiply");def("isComplex",[Complex],"retTrue");def("numberToString",[Complex],"Complex_numberToString");def("sqrt",[Complex],"Complex_sqrt");def("exp",[Complex],"Complex_exp");def("log",[Complex],"Complex_log");def("sin",[Complex],"Complex_sin");def("cos",[Complex],"Complex_cos");def("tan",[Complex],"tan_via_divide_sin_cos");def("asin",[Complex],"Complex_asin");def("acos",[Complex],"Complex_acos");def("atan",[Complex],"Complex_atan");def("toInexact",[Complex],"Complex_toInexact");def("toExact",[Complex],"Complex_toExact");def("isZero",[Complex],"Complex_isZero");def("magnitude",[Complex],"Complex_magnitude");def("angle",[Complex],"Complex_angle");def("eq",[Complex,Complex],"Complex_eq");def("eq",[Complex,Real],"Complex_eq_Real");def("eq",[Real,Complex],"Real_eq_Complex");def("ne",[Complex,Complex],"Complex_ne");def("ne",[Complex,Real],"Complex_ne_Real");def("ne",[Real,Complex],"Real_ne_Complex");def("add",[Real,Complex],"Real_add_Complex");def("add",[Complex,Real],"Complex_add_Real");def("add",[Complex,Complex],"Complex_add");def("subtract",[Real,Complex],"Real_subtract_Complex");def("subtract",[Complex,Real],"Complex_subtract_Real");def("subtract",[Complex,Complex],"Complex_subtract");def("negate",[Complex],"Complex_negate");def("multiply",[Real,Complex],"Real_multiply_Complex");def("multiply",[Complex,Real],"Complex_multiply_Real");def("multiply",[Complex,Complex],"Complex_multiply");def("divide",[Complex,Real],"Complex_divide_Real");def("square",[Complex],"Complex_square");def("reciprocal",[Complex],"Complex_reciprocal");def("divide",[Real,Complex],"Real_divide_Complex");def("divide",[Complex,Complex],"Complex_divide");def("isReal",[Real],"retTrue");def("realPart",[Real],"retThis");def("imagPart",[Real],"retZero");def("conjugate",[Real],"retThis");def("isUnit",[Real],"isUnit_via_eq");def("magnitude",[Real],"Real_magnitude_via_abs");def("isPositive",[Real],"isPositive_via_sign");def("isNegative",[Real],"isNegative_via_sign");def("isZero",[Real],"isZero_via_sign");def("sign",[Real],"sign_via_compare");def("eq",[Real,Real],"eq_via_compare");def("ne",[Real,Real],"ne_via_compare");def("gt",[Real,Real],"gt_via_compare");def("lt",[Real,Real],"lt_via_compare");def("ge",[Real,Real],"ge_via_compare");def("le",[Real,Real],"le_via_compare");def("divAndMod",[Real,Real],"divAndMod_via_divide_floor");def("div",[Real,Real],"div_via_divide_floor");def("mod",[Real,Real],"mod_via_divide_floor");def("abs",[Real],"abs_via_isNegative_negate");def("ceiling",[Real],"ceiling_via_floor");def("truncate",[Real],"truncate_via_ceiling_floor");def("round",[Real],"round_via_floor_compare_isEven");def("isExact",[InexactReal],"retFalse");def("isInexact",[InexactReal],"retTrue");def("toInexact",[InexactReal],"retThis");def("angle",[InexactReal],"InexactReal_angle_via_isNegative");def("isExact",[ExactReal],"retTrue");def("isInexact",[ExactReal],"retFalse");def("toExact",[ExactReal],"retThis");def("SN_isNaN",[ExactReal],"retFalse");def("SN_isFinite",[ExactReal],"retTrue");def("SN_isInfinite",[ExactReal],"retFalse");def("angle",[ExactReal],"ExactReal_angle_via_isNegative");def("isRational",[ExactRational],"retTrue");def("divideReduced",[ExactInteger,ExactInteger],"divideReduced_via_isUnit");def("divide",[ExactInteger,ExactInteger],"Integer_divide_via_gcd_div");def("reciprocal",[ExactInteger],"Integer_reciprocal_via_divideReduced");def("isInteger",[ExactInteger],"retTrue");def("numerator",[ExactInteger],"retThis");def("denominator",[ExactInteger],"retOne");def("floor",[ExactInteger],"retThis");def("ceiling",[ExactInteger],"retThis");def("round",[ExactInteger],"retThis");def("truncate",[ExactInteger],"retThis");def("exp10",[ExactInteger],"genericExp10");def("gcdNonnegative",[ExactInteger,ExactInteger],"gcdNonnegative_via_isZero_mod");def("bitwiseNot",[ExactInteger],"bitwiseNot_via_subtract");def("expt",[Complex,Complex],"Complex_expt");def("expt",[ExactReal,ExactInteger],"expt_N_EI");def("expt",[Complex,ExactInteger],"complex_or_exact_expt");def("numberToString",[ExactRational],"ExactRational_numberToString");def("numberToString",[ExactInteger],undefined);def("numeratorAndDenominator",[ExactInteger],"Integer_numeratorAndDenominator");}function installEcmaMethods(plugins){var N=plugins.get("SchemeNumberType");var ExactReal=plugins.get("ExactReal");var Complex=plugins.get("Complex");var Real=plugins.get("Real");var ExactRational=plugins.get("ExactRational");Complex.prototype.valueOf=plugins.get("Complex_valueOf");Complex.prototype.toString=plugins.get("Complex_toString");Complex.prototype.toFixed=plugins.get("Complex_toFixed");Complex.prototype.toExponential=plugins.get("Complex_toExponential");Complex.prototype.toPrecision=plugins.get("Complex_toPrecision");Real.prototype.valueOf=N.prototype.valueOf;Real.prototype.toFixed=N.prototype.toFixed;Real.prototype.toExponential=N.prototype.toExponential;Real.prototype.toPrecision=N.prototype.toPrecision;Real.prototype.toString=N.prototype.toString;ExactReal.prototype.toFixed=plugins.get("Real_toFixed");ExactReal.prototype.toExponential=plugins.get("Real_toExponential");ExactReal.prototype.toPrecision=plugins.get("Real_toPrecision");}function makeBase(){var SchemeNumber=makeMinimalBase();var plugins=SchemeNumber.plugins;SchemeNumber.makeMinimalBase=makeMinimalBase;SchemeNumber.makeBase=makeBase;plugins.extend(implementPluginLibrary(plugins));plugins.extend(defineAbstractTypes(plugins));installAbstractTypes(plugins);installStubFunctions(plugins);installGenericFunctions(plugins);installEcmaMethods(plugins);return SchemeNumber;}function installDefaultExactInteger(plugins,convert){var ExactInteger=plugins.get("ExactInteger");function def(name){var func=plugins.get(name);function EI_func(n){return func(convert(this),convert(n));}func.def(ExactInteger,ExactInteger,EI_func);}def("compare");def("add");def("subtract");def("multiply");def("expt");def("divAndMod");def("div");def("mod");def("gcdNonnegative");plugins.extend("canonicalExactInteger",convert);}function installDefaultRational(plugins,convert,divideReduced){var ExactInteger=plugins.get("ExactInteger");var ExactRational=plugins.get("ExactRational");function def(name){var func=plugins.get(name);function EQ_func(n){return func(convert(this),convert(n));}func.def(ExactRational,ExactRational,EQ_func);}def("compare");def("add");def("subtract");def("multiply");def("divide");function EI_divideReduced(n){return divideReduced(this,n);}plugins.get("divideReduced").def(ExactInteger,ExactInteger,EI_divideReduced);plugins.extend("canonicalRational",convert);}function implementNativeInexactReal(plugins){var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var InexactReal=plugins.get("InexactReal");var api=g.Object.create(null);var Number_toFixed=uncurry(g.Number.prototype.toFixed);var Number_toExponential=uncurry(g.Number.prototype.toExponential);var Number_toPrecision=uncurry(g.Number.prototype.toPrecision);var Number_toString=uncurry(g.Number.prototype.toString);var Number_toLocaleString=uncurry(g.Number.prototype.toLocaleString);var _parseFloat=g.parseFloat;function NativeInexactReal(x){this._=x;}NativeInexactReal.prototype=new InexactReal();function NativeInexactReal_debug(){return"NativeInexact("+this._+")";}function valueOf(){return this._;}function toFixed(digits){return Number_toFixed(this._,digits);}function toExponential(digits){return Number_toExponential(this._,digits);}function toPrecision(precision){return Number_toPrecision(this._,precision);}function toString(radix){return Number_toString(this._,radix);}function toLocaleString(){return Number_toLocaleString(this._);}NativeInexactReal.prototype.valueOf=valueOf;NativeInexactReal.prototype.toFixed=toFixed;NativeInexactReal.prototype.toExponential=toExponential;NativeInexactReal.prototype.toPrecision=toPrecision;NativeInexactReal.prototype.toString=toString;NativeInexactReal.prototype.toLocaleString=toLocaleString;var Flonum=NativeInexactReal;var INEXACT_ZERO=new NativeInexactReal(0);function nativeToInexact(x){return(x===0?INEXACT_ZERO:new NativeInexactReal(x));}function parseInexact(sign,string){return nativeToInexact(sign*_parseFloat(string));}function defNative(name){var math=g.Math[name];function nativeMath1(a){return nativeToInexact(math(a));}function nativeMath2(a,b){return nativeToInexact(math(a,b));}api["Native_"+name]=(math.length===1?nativeMath1:nativeMath2);}defNative("log");defNative("sqrt");defNative("atan2");defNative("atan");defNative("cos");defNative("sin");defNative("tan");defNative("exp");defNative("abs");defNative("floor");defNative("ceil");defNative("pow");api.parseInexact=parseInexact;api.nativeToInexact=nativeToInexact;api.NativeInexactReal=NativeInexactReal;api.NativeInexactReal_debug=NativeInexactReal_debug;return api;}function implementNativeFlonumLibrary(plugins){var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var api=g.Object.create(null);var String_indexOf=uncurry(g.String.prototype.indexOf);var String_substring=uncurry(g.String.prototype.substring);var String_replace=uncurry(g.String.prototype.replace);var Number_toString=uncurry(g.Number.prototype.toString);var Math_E=g.Math.E;var Math_LN10=g.Math.LN10;var Math_LN2=g.Math.LN2;var Math_LOG2E=g.Math.LOG2E;var Math_LOG10E=g.Math.LOG10E;var Math_PI=g.Math.PI;var Math_SQRT1_2=g.Math.SQRT1_2;var Math_SQRT2=g.Math.SQRT2;var Math_abs=g.Math.abs;var Math_acos=g.Math.acos;var Math_asin=g.Math.asin;var Math_atan=g.Math.atan;var Math_atan2=g.Math.atan2;var Math_ceil=g.Math.ceil;var Math_cos=g.Math.cos;var Math_exp=g.Math.exp;var Math_floor=g.Math.floor;var Math_log=g.Math.log;var Math_max=g.Math.max;var Math_min=g.Math.min;var Math_pow=g.Math.pow;var Math_random=g.Math.random;var Math_round=g.Math.round;var Math_sin=g.Math.sin;var Math_sqrt=g.Math.sqrt;var Math_tan=g.Math.tan;var _isFinite=g.isFinite;var _isNaN=g.isNaN;var _parseFloat=g.parseFloat;var _undefined=g.undefined;var _Number=g.Number;var nativeToInexact,Native_log,Native_sqrt,Native_atan2,Native_atan,Native_cos,Native_sin,Native_tan,Native_exp,Native_abs,Native_floor,Native_ceil,Native_pow;var raise,inexactRectangular,INEXACT_ZERO,nativeToExactInteger,TWO,divideReducedNotByOne,numberToString,isExact,isInexact,toExact,toInexact,isRational,isInteger,isZero,negate,square,eq,ne,add,subtract,multiply,divide,expt,exp,sqrt,log,asin,acos,atan,sin,cos,tan,abs,isPositive,isNegative,sign,floor,ceiling,truncate,round,compare,gt,lt,ge,le,divAndMod,div,mod,atan2,numerator,denominator,isEven,isOdd,Complex_expt_fn,Complex_acos_fn,Complex_asin_fn,Complex_log_fn,numberToBinary,nativeDenominatorLog2,nativeDenominator;function onPluginsChanged(plugins){nativeToInexact=plugins.get("nativeToInexact");Native_log=plugins.get("Native_log");Native_sqrt=plugins.get("Native_sqrt");Native_atan2=plugins.get("Native_atan2");Native_atan=plugins.get("Native_atan");Native_cos=plugins.get("Native_cos");Native_sin=plugins.get("Native_sin");Native_tan=plugins.get("Native_tan");Native_exp=plugins.get("Native_exp");Native_abs=plugins.get("Native_abs");Native_floor=plugins.get("Native_floor");Native_ceil=plugins.get("Native_ceil");Native_pow=plugins.get("Native_pow");raise=plugins.get("raise");inexactRectangular=plugins.get("inexactRectangular");INEXACT_ZERO=plugins.get("INEXACT_ZERO");nativeToExactInteger=plugins.get("nativeToExactInteger");divideReducedNotByOne=plugins.get("divideReducedNotByOne");TWO=plugins.get("TWO");numberToString=plugins.get("numberToString");isExact=plugins.get("isExact");isInexact=plugins.get("isInexact");toExact=plugins.get("toExact");toInexact=plugins.get("toInexact");isRational=plugins.get("isRational");isInteger=plugins.get("isInteger");isZero=plugins.get("isZero");negate=plugins.get("negate");square=plugins.get("square");eq=plugins.get("eq");ne=plugins.get("ne");add=plugins.get("add");subtract=plugins.get("subtract");multiply=plugins.get("multiply");divide=plugins.get("divide");expt=plugins.get("expt");exp=plugins.get("exp");sqrt=plugins.get("sqrt");log=plugins.get("log");asin=plugins.get("asin");acos=plugins.get("acos");atan=plugins.get("atan");sin=plugins.get("sin");cos=plugins.get("cos");tan=plugins.get("tan");abs=plugins.get("abs");isPositive=plugins.get("isPositive");isNegative=plugins.get("isNegative");sign=plugins.get("sign");floor=plugins.get("floor");ceiling=plugins.get("ceiling");truncate=plugins.get("truncate");round=plugins.get("round");compare=plugins.get("compare");gt=plugins.get("gt");lt=plugins.get("lt");ge=plugins.get("ge");le=plugins.get("le");divAndMod=plugins.get("divAndMod");div=plugins.get("div");mod=plugins.get("mod");atan2=plugins.get("atan2");numerator=plugins.get("numerator");denominator=plugins.get("denominator");isEven=plugins.get("isEven");isOdd=plugins.get("isOdd");Complex_expt_fn=plugins.get("Complex_expt_fn");Complex_acos_fn=plugins.get("Complex_acos_fn");Complex_asin_fn=plugins.get("Complex_asin_fn");Complex_log_fn=plugins.get("Complex_log_fn");numberToBinary=plugins.get("numberToBinary");nativeDenominatorLog2=plugins.get("nativeDenominatorLog2");nativeDenominator=plugins.get("nativeDenominator");}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins);function Real_toInexact_via_Flonum(){return nativeToInexact(Number(this));}function Flonum_numberToString(radix,precision){var t=(+this);if(radix&&radix!=10&&_isFinite(t)){return"#i"+numberToString(toExact(this),radix);}if(!_isFinite(t)){if(_isNaN(t)){return("+nan.0");}return(t>0?"+inf.0":"-inf.0");}var s=Number_toString(t);if(String_indexOf(s,".")===-1){var e=String_indexOf(s,"e");if(e===-1){s+=".";}else{s=(String_substring(s,0,e)+"."+String_substring(s,e));}}if(precision!=_undefined){if(precision<53){var bits=String_replace(String_replace(String_replace(numberToBinary(+this),/[-+.]/g,""),/^0+/,""),/0+$/,"").length;if(precision<bits){precision=bits;}}s+="|"+precision;}return s;}function Flonum_denominator(){var t=(+this);if(!_isFinite(t)){raise("&assertion","not a rational number",t);}return Native_pow(2,nativeDenominatorLog2(t));}function Flonum_numerator(){var t=(+this);if(!_isFinite(t)){raise("&assertion","not a rational number",t);}return nativeToInexact(this*nativeDenominator(t));}function Flonum_isInteger(){var t=(+this);return _isFinite(t)&&t===Math_floor(t);}function Flonum_SN_isFinite(){return _isFinite(+this);}function Flonum_SN_isInfinite(){var t=(+this);return !_isFinite(t)&&!_isNaN(t);}function Flonum_SN_isNaN(){return _isNaN(+this);}function Flonum_isZero(){return(+this)===0;}function Flonum_isPositive(){return(+this)>0;}function Flonum_isNegative(){return(+this)<0;}function Flonum_sign(){var t=(+this);return(t===0?0:(t>0?1:-1));}function Flonum_isEven(){return((+this)&1)===0;}function Flonum_isOdd(){return((+this)&1)===1;}function Flonum_eq(x){return(+this)===(+x);}function Flonum_ne(x){return(+this)!==(+x);}function Flonum_gt(x){return(+this)>(+x);}function Flonum_lt(x){return(+this)<(+x);}function Flonum_ge(x){return(+this)>=(+x);}function Flonum_le(x){return(+this)<=(+x);}function Flonum_compare(x){var t=(+this);x=(+x);if(t===x){return 0;}if(t<x){return -1;}if(t>x){return 1;}return NaN;}function Flonum_toExact(){var x=(+this);if(!_isFinite(x)){raise("&implementation-violation","inexact argument has no reasonably close exact equivalent",this);}var d=nativeDenominator(x);var n;if(d===1){return nativeToExactInteger(x);}if(_isFinite(d)){n=x*d;d=nativeToExactInteger(d);}else{var dl2=nativeDenominatorLog2(x);n=x*9007199254740992;n*=natPow(2,dl2-53);d=expt(TWO,nativeToExactInteger(dl2));}return divideReducedNotByOne(nativeToExactInteger(n),d);}function Flonum_add(x){return nativeToInexact((+this)+(+x));}function Flonum_subtract(x){return nativeToInexact((+this)-(+x));}function Flonum_multiply(x){return nativeToInexact((+this)*(+x));}function Flonum_divide(x){return nativeToInexact((+this)/(+x));}function Flonum_negate(){return nativeToInexact(-(+this));}function Flonum_abs(){return nativeToInexact(Math_abs(+this));}function Flonum_reciprocal(){return nativeToInexact(1/(+this));}function div_native(x,y){if(y>0){return Math_floor(x/y);}if(y<0){return Math_ceil(x/y);}return NaN;}function Flonum_divAndMod(y){var x=(+this);y=(+y);var div=div_native(x,y);return[nativeToInexact(div),nativeToInexact(x-(y*div))];}function Flonum_div(y){var x=(+this);y=(+y);return nativeToInexact(div_native(x,y));}function Flonum_mod(y){var x=(+this);y=(+y);return nativeToInexact(x-y*div_native(x,y));}function Flonum_square(){var t=(+this);return nativeToInexact(t*t);}function Flonum_expt(x){var t=(+this);if(t<0){return Complex_expt_fn(this,x);}return Native_pow(t,x);}function Flonum_round(){var t=(+this);var ret=Math_floor(t);var diff=t-ret;if(diff<0.5){return nativeToInexact(ret);}if(diff>0.5){return nativeToInexact(ret+1);}return nativeToInexact(2*Math_round(t/2));}function Flonum_truncate(){var t=(+this);return(t<0?Native_ceil(t):Native_floor(t));}function funcToMeth(fn){return function(){return fn(+this);};}var Flonum_ceiling=funcToMeth(Native_ceil);var Flonum_floor=funcToMeth(Native_floor);var Flonum_atan=funcToMeth(Native_atan);var Flonum_cos=funcToMeth(Native_cos);var Flonum_exp=funcToMeth(Native_exp);var Flonum_sin=funcToMeth(Native_sin);var Flonum_tan=funcToMeth(Native_tan);function cplxFuncToMeth(mathFunc,complexFunc){return function(){var t=(+this);var ret=mathFunc(t);if(_isNaN(ret)){return complexFunc(this);}return nativeToInexact(ret);};}var Flonum_acos=cplxFuncToMeth(Math_acos,Complex_acos_fn);var Flonum_asin=cplxFuncToMeth(Math_asin,Complex_asin_fn);function Flonum_log(){var x=(+this);if(x<0){return Complex_log_fn(this);}return Native_log(x);}function Flonum_sqrt(){var x=(+this);if(x>=0){return Native_sqrt(x);}if(_isNaN(x)){return nativeToInexact(x);}return inexactRectangular(INEXACT_ZERO,Native_sqrt(-x));}function Flonum_atan2(x){return Native_atan2((+this),x);}api.Real_toInexact_via_Flonum=Real_toInexact_via_Flonum;api.Flonum_numberToString=Flonum_numberToString;api.Flonum_isRational=Flonum_SN_isFinite;api.Flonum_denominator=Flonum_denominator;api.Flonum_numerator=Flonum_numerator;api.Flonum_isInteger=Flonum_isInteger;api.Flonum_SN_isFinite=Flonum_SN_isFinite;api.Flonum_SN_isInfinite=Flonum_SN_isInfinite;api.Flonum_SN_isNaN=Flonum_SN_isNaN;api.Flonum_isZero=Flonum_isZero;api.Flonum_isPositive=Flonum_isPositive;api.Flonum_isNegative=Flonum_isNegative;api.Flonum_sign=Flonum_sign;api.Flonum_isEven=Flonum_isEven;api.Flonum_isOdd=Flonum_isOdd;api.Flonum_eq=Flonum_eq;api.Flonum_ne=Flonum_ne;api.Flonum_gt=Flonum_gt;api.Flonum_lt=Flonum_lt;api.Flonum_ge=Flonum_ge;api.Flonum_le=Flonum_le;api.Flonum_compare=Flonum_compare;api.Flonum_toExact=Flonum_toExact;api.Flonum_add=Flonum_add;api.Flonum_subtract=Flonum_subtract;api.Flonum_multiply=Flonum_multiply;api.Flonum_divide=Flonum_divide;api.Flonum_negate=Flonum_negate;api.Flonum_abs=Flonum_abs;api.Flonum_reciprocal=Flonum_reciprocal;api.Flonum_divAndMod=Flonum_divAndMod;api.Flonum_div=Flonum_div;api.Flonum_mod=Flonum_mod;api.Flonum_square=Flonum_square;api.Flonum_expt=Flonum_expt;api.Flonum_round=Flonum_round;api.Flonum_truncate=Flonum_truncate;api.Flonum_ceiling=Flonum_ceiling;api.Flonum_floor=Flonum_floor;api.Flonum_atan=Flonum_atan;api.Flonum_cos=Flonum_cos;api.Flonum_exp=Flonum_exp;api.Flonum_sin=Flonum_sin;api.Flonum_tan=Flonum_tan;api.Flonum_acos=Flonum_acos;api.Flonum_asin=Flonum_asin;api.Flonum_log=Flonum_log;api.Flonum_sqrt=Flonum_sqrt;api.Flonum_atan2=Flonum_atan2;return api;}function installFlonum(plugins){var Flonum=plugins.get("Flonum");var Real=plugins.get("Real");var InexactReal=plugins.get("InexactReal");var ExactReal=plugins.get("ExactReal");var i;var isDefaultFlonum=true;if(!(Flonum.prototype instanceof InexactReal)){for(i in InexactReal.prototype){if(!(i in Flonum.prototype)){Flonum.prototype[i]=InexactReal.prototype[i];}}}if(isDefaultFlonum){plugins.get("toInexact").def(ExactReal,plugins.get("Real_toInexact_via_Flonum"));}function def1_Flonum(name){var impl=plugins.get("Flonum_"+name);if(!impl){console.log("Flonum_"+name+" not defined");}plugins.get(name).def(Flonum,impl);}function def1_InexactReal(name){var impl=plugins.get("Flonum_"+name);if(!impl){console.log("Flonum_"+name+" not defined");}plugins.get(name).def(InexactReal,impl);}function def1_Real(name){var impl=plugins.get("Flonum_"+name);if(!impl){console.log("Flonum_"+name+" not defined");}plugins.get(name).def(Real,impl);}function def2_base(name){var generic=plugins.get(name);var impl=plugins.get("Flonum_"+name);if(!impl){console.log("Flonum_"+name+" not defined");}generic.def(Flonum,Flonum,impl);}function def2_Flonum(name){var generic=plugins.get(name);var impl=plugins.get("Flonum_"+name);def2_base(name);generic.def(ExactReal,Flonum,impl);generic.def(Flonum,ExactReal,impl);}function def2_InexactReal(name){var generic=plugins.get(name);var impl=plugins.get("Flonum_"+name);def2_base(name);generic.def(Real,InexactReal,impl);generic.def(InexactReal,Real,impl);}function def2_Real(name){var generic=plugins.get(name);var impl=plugins.get("Flonum_"+name);def2_base(name);generic.def(Real,Real,impl);}var def1inexact=(isDefaultFlonum?def1_InexactReal:def1_Flonum);var def1real=(isDefaultFlonum?def1_Real:def1_Flonum);var def2inexact=(isDefaultFlonum?def2_InexactReal:def2_Flonum);var def2real=(isDefaultFlonum?def2_Real:def2_Flonum);def1inexact("numberToString");def1inexact("isRational");def1inexact("denominator");def1inexact("numerator");def1inexact("isInteger");def1inexact("SN_isFinite");def1inexact("SN_isInfinite");def1inexact("SN_isNaN");def1inexact("isZero");def1inexact("isPositive");def1inexact("isNegative");def1inexact("sign");def1inexact("isEven");def1inexact("isOdd");def1inexact("toExact");def1inexact("negate");def1inexact("abs");def1inexact("reciprocal");def1inexact("square");def1inexact("round");def1inexact("truncate");def1inexact("ceiling");def1inexact("floor");def1real("atan");def1real("cos");def1real("exp");def1real("sin");def1real("tan");def1real("acos");def1real("asin");def1real("log");def1real("sqrt");def2inexact("eq");def2inexact("ne");def2inexact("gt");def2inexact("lt");def2inexact("ge");def2inexact("le");def2inexact("compare");def2inexact("add");def2inexact("subtract");def2inexact("multiply");def2inexact("divide");def2inexact("divAndMod");def2inexact("div");def2inexact("mod");def2real("expt");def2real("atan2");}function implementBigInteger(plugins,BigInteger){var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var SchemeNumber=plugins.get("SchemeNumber");var BigIntegerName=BigInteger.name||"BigInteger";var Number_toString=uncurry(g.Number.prototype.toString);var String_replace=uncurry(g.String.prototype.replace);var Array_concat=uncurry(g.Array.prototype.concat);var Array_map=uncurry(g.Array.map);var Math_LN10=g.Math.LN10;var Math_LN2=g.Math.LN2;var Math_abs=g.Math.abs;var Math_exp=g.Math.exp;var Math_floor=g.Math.floor;var Math_pow=g.Math.pow;var Math_sqrt=g.Math.sqrt;var api=g.Object.create(null);var toBigInteger=plugins.get("Dispatch").defGeneric("to"+BigIntegerName,1);var raise,numberToString,isNegative,negate,abs,mod,reciprocal,divide,sign,exp10,nativeToInexact,inexactRectangular,ZERO,ONE,MINUS_ONE,_2_32,PI,INEXACT_ZERO;raise=plugins.get("raise");numberToString=plugins.get("numberToString");isNegative=plugins.get("isNegative");negate=plugins.get("negate");abs=plugins.get("abs");mod=plugins.get("mod");reciprocal=plugins.get("reciprocal");divide=plugins.get("divide");sign=plugins.get("sign");exp10=plugins.get("exp10");_2_32=nativeToExactInteger(4294967296);function onPluginsChanged(plugins,changed){nativeToInexact=plugins.get("nativeToInexact");inexactRectangular=plugins.get("inexactRectangular");ZERO=plugins.get("ZERO");ONE=plugins.get("ONE");MINUS_ONE=plugins.get("MINUS_ONE");PI=plugins.get("PI");INEXACT_ZERO=plugins.get("INEXACT_ZERO");}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins);function BigInteger_debug(){return BigIntegerName+"("+this.toString()+")";}function parseExactInteger(sign,string,radix){var n=BigInteger.parse(String_replace(string,/^0+/,""),radix);if(sign<0){n=n.negate();}return n;}function nativeToExactInteger(n){return BigInteger.parse(Number_toString(n,16),16);}function ExactInteger_toBigInteger(){return BigInteger.parse(numberToString(this));}function integerTooBig(digits){raise("&implementation-restriction","exact integer would exceed limit of "+(+SchemeNumber.maxIntegerDigits)+" digits; adjust SchemeNumber.maxIntegerDigits",digits);}function BigInteger_expt(p){if(this.isZero()){return(p.isZero()?ONE:this);}if(this.isUnit()){if(this.isPositive()){return this;}return(p.isEven()?ONE:this);}p=p.valueOf();var a=this.pow(Math_abs(p));return(p>=0?a:reciprocal(a));}function BigInteger_numberToString(radix){return this.toString(radix);}function divAndMod_BigInteger(n,d){var dm=n.divRem(d);if(dm[1].isNegative()){if(d.isNegative()){return[dm[0].next(),dm[1].subtract(d)];}return[dm[0].prev(),dm[1].add(d)];}return dm;}function BigInteger_divAndMod(d){return divAndMod_BigInteger(this,d);}function BigInteger_div(d){return divAndMod_BigInteger(this,d)[0];}function BigInteger_mod(d){return divAndMod_BigInteger(this,d)[1];}function BigInteger_log(){var x=nativeToInexact(this.abs().log());return this.isPositive()?x:inexactRectangular(x,PI);}function BigInteger_exp10(e){switch(sign(e)){case 0:return this;case -1:return divide(this,exp10(ONE,negate(e)));case 1:e=+e;if(e>SchemeNumber.maxIntegerDigits&&!this.isZero()){integerTooBig(e);}return this.exp10(e);}}function BigInteger_sqrt(){var s=this.sign();if(s===0){return this;}var mag=nativeToInexact(Math_exp(this.abs().log()/2));if(s<0){return inexactRectangular(INEXACT_ZERO,mag);}return mag;}function BigInteger_exactIntegerSqrt(){function doit(n,a){while(true){var dm=n.divRem(a);var b=dm[0];var diff=a.subtract(b);if(diff.isZero()){return[b,dm[1]];}if(diff.isUnit()){if(diff.isPositive()){return[b,b.add(dm[1])];}return[a,a.add(dm[1])];}a=b.add(diff.quotient(2));}}switch(this.sign()){case -1:raise("&assertion","negative number",this);case 0:return[ZERO,ZERO];case 1:default:break;}var l=this.log()/2/Math_LN10;if(l<7){var x=this.valueOf();var f=Math_floor(Math_sqrt(x));return[BigInteger(f),BigInteger(x-f*f)];}var a=BigInteger(Number_toString(Math_pow(10,l-Math_floor(l)))+"e"+Math_floor(l));return doit(this,a);}function BigInteger_gcdNonnegative(n){var a=this;if(a.isZero()){return n;}var b=n;var c;while(true){c=a;a=b.remainder(a);if(a.isZero()){return c;}b=c;}}function makeBitOp(op){function BigInteger_bitwiseOp(b){var a=this;var ret=BigInteger.ZERO;var d=BigInteger.ONE;var t,dm;while(true){dm=a.divRem(_2_32);t=+dm[1];a=dm[0];dm=b.divRem(_2_32);t=op(t,+dm[1]);b=dm[0];if(t<0){t+=4294967296;}ret=ret.add(d.multiply(nativeToExactInteger(t)));if(a.isZero()){break;}d=d.multiply(_2_32);}if(op(0,1)){ret=ret.add(b.multiply(d));}return ret;}return BigInteger_bitwiseOp;}var BigInteger_bitwiseAnd=makeBitOp(function(x,y){return x&y;});var BigInteger_bitwiseIor=makeBitOp(function(x,y){return x|y;});var BigInteger_bitwiseXor=makeBitOp(function(x,y){return x^y;});var bitCountArray,ffsArray;function addOne(x){return x+1;}function getBitCountArray(){if(!bitCountArray){bitCountArray=[0];while(bitCountArray.length<(1<<8)){bitCountArray=Array_concat(bitCountArray,Array_map(bitCountArray,addOne));}}return bitCountArray;}function getFfsArray(){if(!ffsArray){ffsArray=[0];while(ffsArray.length<(1<<8)){ffsArray=ffsArray.concat(ffsArray);ffsArray[0]++;}}return ffsArray;}function BigInteger_bitCount(){var a=this;var ret=0,dm,t,bc;while(!a.isZero()){dm=a.divRem(_2_32);a=dm[0];t=+dm[1];bc=getBitCountArray();ret+=bc[(t>>0)&255];ret+=bc[(t>>8)&255];ret+=bc[(t>>16)&255];ret+=bc[(t>>24)&255];}return nativeToExactInteger(ret);}function BigInteger_bitLength(){var a=this;switch(a.sign()){case 0:return ZERO;case -1:a=BigInteger.M_ONE.subtract(a);}var guess=a.log()/Math_LN2;var test=Math_floor(guess);var p2test=BigInteger.pow(2,Math_floor(guess));if(p2test.compare(a)>0){while(true){a=a.add(a);if(p2test.compare(a)<=0){return nativeToExactInteger(test);}test--;}}while(true){p2test=p2test.add(p2test);test++;if(p2test.compare(a)>0){return nativeToExactInteger(test);}}}function BigInteger_firstBitSet(){var a=this,dm,m,ret;if(a.isZero()){return MINUS_ONE;}for(ret=0;;ret+=32){dm=a.divRem(_2_32);m=dm[1];if(!m.isZero()){break;}a=dm[0];}m=+m;while((m&255)===0){ret+=8;m>>=8;}return nativeToExactInteger(ret+getFfsArray()[m&255]);}function BigInteger_isBitSet(i){var p2i=BigInteger.pow(2,+i);return this.remainder(p2i.add(p2i)).compare(p2i)>=0;}function BigInteger_copyBit(i,setIt){var p2i=BigInteger.pow(2,+i);var isSet=this.remainder(p2i.add(p2i)).compare(p2i)>=0;switch(setIt-isSet){case 0:return this;case 1:return this.add(p2i);case -1:return this.subtract(p2i);}}function BigInteger_bitField(lo,hi){lo=+lo;var p2width=BigInteger.pow(2,hi-lo);var p2lo=BigInteger.pow(2,lo);return this.quotient(p2lo).remainder(p2width);}function BigInteger_copyBitField(from,lo,hi){lo=+lo;var p2width=BigInteger.pow(2,hi-lo);var p2lo=BigInteger.pow(2,lo);var old=this.quotient(p2lo).remainder(p2width);return this.add(p2lo.multiply(from.subtract(old).quotient(p2width)));}function BigInteger_bitShift(count){var p2=BigInteger.pow(2,+abs(count));return(isNegative(count)?this.quotient(p2):this.multiply(p2));}function BigInteger_rotateBitField(lo,hi,count){lo=+lo;var width=hi-lo;if(width<2){return this;}count=+mod(count,nativeToExactInteger(width));if(count===0){return this;}var p2width=BigInteger.pow(2,width);var p2lo=BigInteger.pow(2,lo);var p2count=BigInteger.pow(2,count);var old=this.quotient(p2lo).remainder(p2width);var tmp=old.multiply(p2count);tmp=tmp.add(tmp.quotient(p2width)).remainder(p2width);return this.add(p2lo.multiply(tmp.subtract(old)));}function BigInteger_reverseBitField(lo,hi){var i;lo=+lo;var p2width=BigInteger.pow(2,hi-lo);var p2lo=BigInteger.pow(2,+lo);var bits=this.quotient(p2lo).remainder(p2width);var string=bits.toString(2);var last=string.length-1;if(last<1){return this;}var revString="";for(i=0;i<string.length;i++){revString+=string[last-i];}var reversed=BigInteger.parse(revString,2);return this.add(reversed.subtract(bits).multiply(p2lo));}function install(){var disp=plugins.get("Dispatch");var ExactInteger=plugins.get("ExactInteger");var debug=plugins.get("debug");var retThis=plugins.get("retThis");disp.defClass("BigInteger",{ctor:BigInteger,base:"ExactInteger"});BigInteger.init();debug.def(BigInteger,BigInteger_debug);toBigInteger.def(BigInteger,retThis);toBigInteger.def(ExactInteger,ExactInteger_toBigInteger);function def1(generic,func){plugins.get(generic).def(BigInteger,func);}function def2(generic,func){plugins.get(generic).def(BigInteger,BigInteger,func);}function defBigUnary(name){plugins.get(name).def(BigInteger,BigInteger.prototype[name]);}function defBigBinary(name){plugins.get(name).def(BigInteger,BigInteger,BigInteger.prototype[name]);}def2("expt",BigInteger_expt);def1("numberToString",BigInteger_numberToString);defBigUnary("isZero");defBigUnary("isEven");defBigUnary("isOdd");defBigUnary("sign");defBigUnary("isUnit");defBigUnary("isPositive");defBigUnary("isNegative");defBigUnary("negate");defBigUnary("abs");defBigUnary("square");defBigBinary("compare");defBigBinary("add");defBigBinary("subtract");defBigBinary("multiply");def1("log",BigInteger_log);def1("exp10",BigInteger_exp10);def1("sqrt",BigInteger_sqrt);def1("exactIntegerSqrt",BigInteger_exactIntegerSqrt);def2("divAndMod",BigInteger_divAndMod);def2("div",BigInteger_div);def2("mod",BigInteger_mod);def2("gcdNonnegative",BigInteger_gcdNonnegative);def2("bitwiseAnd",BigInteger_bitwiseAnd);def2("bitwiseIor",BigInteger_bitwiseIor);def2("bitwiseXor",BigInteger_bitwiseXor);def1("bitCount",BigInteger_bitCount);def1("bitLength",BigInteger_bitLength);def1("firstBitSet",BigInteger_firstBitSet);def1("isBitSet",BigInteger_isBitSet);def1("copyBit",BigInteger_copyBit);def1("bitField",BigInteger_bitField);def2("copyBitField",BigInteger_copyBitField);def1("bitShift",BigInteger_bitShift);def1("rotateBitField",BigInteger_rotateBitField);def1("reverseBitField",BigInteger_reverseBitField);}api.parseExactInteger=parseExactInteger;api.nativeToExactInteger=nativeToExactInteger;api.importExactInteger=toBigInteger;api.install=install;return api;}function defaultRationalFactory(plugins){var ExactRational=plugins.get("ExactRational");var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var api=g.Object.create(null);var Math_exp=g.Math.exp;var _isNaN=g.isNaN;var _isFinite=g.isFinite;var debug,retFalse,isUnit,numeratorAndDenominator,ZERO,ONE,TWO,makeRectangular,eq,compare,add,subtract,multiply,divide,negate,log,exp,isNegative,abs,sqrt,SN_isFinite,sign,div,expt,square,isZero,isPositive,isNegative,raiseDivisionByExactZero;debug=plugins.get("debug");retFalse=plugins.get("retFalse");isUnit=plugins.get("isUnit");numeratorAndDenominator=plugins.get("numeratorAndDenominator");ZERO=plugins.get("ZERO");ONE=plugins.get("ONE");TWO=plugins.get("TWO");makeRectangular=plugins.get("makeRectangular");eq=plugins.get("eq");compare=plugins.get("compare");add=plugins.get("add");subtract=plugins.get("subtract");multiply=plugins.get("multiply");divide=plugins.get("divide");negate=plugins.get("negate");log=plugins.get("log");exp=plugins.get("exp");isNegative=plugins.get("isNegative");abs=plugins.get("abs");sqrt=plugins.get("sqrt");SN_isFinite=plugins.get("SN_isFinite");sign=plugins.get("sign");div=plugins.get("div");expt=plugins.get("expt");square=plugins.get("square");isZero=plugins.get("isZero");isPositive=plugins.get("isPositive");isNegative=plugins.get("isNegative");raiseDivisionByExactZero=plugins.get("raiseDivisionByExactZero");function Fraction(n,d){this._n=n;this._d=d;}Fraction.prototype=new ExactRational();function Fraction_debug(){return"Fraction("+debug(this._n)+" / "+debug(this._d)+")";}function Fraction_valueOf(){var n=this._n;var d=this._d;var ret=n/d;if(_isFinite(ret)){return ret;}switch(sign(n)){case 1:return Math_exp(log(n)-log(d));case -1:return -Math_exp(log(negate(n))-log(d));case 0:default:return 0;}}Fraction.prototype.valueOf=Fraction_valueOf;function Fraction_numerator(){return this._n;}function Fraction_denominator(){return this._d;}function divideReducedNotByOne(n,d){return new Fraction(n,d);}function _divideReduced(n,d){return(isUnit(d)?n:new Fraction(n,d));}var importRational=plugins.get("Dispatch").defGeneric("toFraction",1);function Rational_toFraction(){var nd=numeratorAndDenominator(this);return _divideReduced(nd[0],nd[1]);}function Fraction_numeratorAndDenominator(){return[this._n,this._d];}function Fraction_eq(q){return eq(this._d,q._d)&&eq(this._n,q._n);}function Fraction_compare(q){var signDiff=sign(this._n)-sign(q._n);if(signDiff!==0){return(signDiff>0?1:-1);}if(q._d===this._d){return compare(this._n,q._n);}return compare(multiply(this._n,q._d),multiply(this._d,q._n));}function Fraction_compare_Integer(n){return compare(this._n,multiply(this._d,n));}function Integer_compare_Fraction(q){return compare(multiply(this,q._d),q._n);}function Fraction_sign(){return sign(this._n);}function Fraction_isPositive(){return isPositive(this._n);}function Fraction_isNegative(){return isNegative(this._n);}function Fraction_negate(){return divideReducedNotByOne(negate(this._n),this._d);}function Fraction_square(){return divideReducedNotByOne(square(this._n),square(this._d));}function Fraction_reciprocal(){var n=this._n;switch(sign(n)){case -1:return _divideReduced(negate(this._d),negate(n));case 1:return _divideReduced(this._d,n);case 0:default:raiseDivisionByExactZero();}}function Fraction_add(q){return divide(add(multiply(this._n,q._d),multiply(q._n,this._d)),multiply(this._d,q._d));}function Fraction_add_Integer(n){return divideReducedNotByOne(add(this._n,multiply(n,this._d)),this._d);}function Integer_add_Fraction(q){return divideReducedNotByOne(add(multiply(this,q._d),q._n),q._d);}function Fraction_subtract(q){return divide(subtract(multiply(this._n,q._d),multiply(q._n,this._d)),multiply(this._d,q._d));}function Fraction_subtract_Integer(n){return divideReducedNotByOne(subtract(this._n,multiply(n,this._d)),this._d);}function Integer_subtract_Fraction(q){return divideReducedNotByOne(subtract(multiply(this,q._d),q._n),q._d);}function Fraction_multiply(q){return divide(multiply(this._n,q._n),multiply(this._d,q._d));}function times_int(n,d,i){var nd=numeratorAndDenominator(divide(i,d));return _divideReduced(multiply(n,nd[0]),nd[1]);}function Fraction_multiply_Integer(i){return times_int(this._n,this._d,i);}function Integer_multiply_Fraction(q){return times_int(q._n,q._d,this);}function Fraction_divide(q){return divide(multiply(this._n,q._d),multiply(this._d,q._n));}function Fraction_divide_Integer(i){var nd=numeratorAndDenominator(divide(this._n,i));return new Fraction(nd[0],multiply(nd[1],this._d));}function Integer_divide_Fraction(q){return divide(multiply(this,q._d),q._n);}function Fraction_expt_EI(p){var n,d;switch(sign(p)){case 0:return ONE;case 1:n=this._n;d=this._d;break;case -1:default:n=this._d;d=this._n;p=abs(p);if(isNegative(d)){n=negate(n);d=negate(d);}if(isUnit(d)){return expt(n,p);}}return divideReducedNotByOne(expt(n,p),expt(d,p));}function Fraction_sqrt(){var absN=abs(this._n);var rootN=sqrt(absN),rootD=sqrt(this._d);var ret;if(SN_isFinite(rootN)){if(SN_isFinite(rootD)){ret=divide(rootN,rootD);}else{ret=exp(subtract(log(rootN),divide(log(this._d),TWO)));}}else{ret=exp(subtract(divide(log(absN),TWO),SN_isFinite(rootD)?log(rootD):divide(log(this._d),TWO)));}return(isNegative(this._n)?makeRectangular(ZERO,ret):ret);}function Fraction_log(){return subtract(log(this._n),log(this._d));}function Fraction_floor(){return div(this._n,this._d);}function install(){var disp=plugins.get("Dispatch");var EI=plugins.get("ExactInteger");disp.defClass("Fraction",{ctor:Fraction});importRational.def(Fraction,plugins.get("retThis"));importRational.def(ExactRational,Rational_toFraction);function def(name,type1,type2,func){plugins.get(name).def(type1,type2,func);}function def1(name,func){plugins.get(name).def(Fraction,func);}function def2(name,func){plugins.get(name).def(Fraction,Fraction,func);}def1("debug",Fraction_debug);def1("numerator",Fraction_numerator);def1("denominator",Fraction_denominator);def1("numeratorAndDenominator",Fraction_numeratorAndDenominator);def1("isInteger",retFalse);def2("eq",Fraction_eq);def("eq",Fraction,EI,retFalse);def("eq",EI,Fraction,retFalse);def2("compare",Fraction_compare);def("compare",Fraction,EI,Fraction_compare_Integer);def("compare",EI,Fraction,Integer_compare_Fraction);def1("sign",Fraction_sign);def1("isPositive",Fraction_isPositive);def1("isNegative",Fraction_isNegative);def1("isZero",retFalse);def1("isUnit",retFalse);def1("floor",Fraction_floor);def1("negate",Fraction_negate);def1("square",Fraction_square);def1("reciprocal",Fraction_reciprocal);def2("add",Fraction_add);def("add",Fraction,EI,Fraction_add_Integer);def("add",EI,Fraction,Integer_add_Fraction);def2("subtract",Fraction_subtract);def("subtract",Fraction,EI,Fraction_subtract_Integer);def("subtract",EI,Fraction,Integer_subtract_Fraction);def2("multiply",Fraction_multiply);def("multiply",Fraction,EI,Fraction_multiply_Integer);def("multiply",EI,Fraction,Integer_multiply_Fraction);def2("divide",Fraction_divide);def("divide",Fraction,EI,Fraction_divide_Integer);def("divide",EI,Fraction,Integer_divide_Fraction);def("expt",Fraction,EI,Fraction_expt_EI);def1("sqrt",Fraction_sqrt);def1("log",Fraction_log);}api.divideReducedNotByOne=divideReducedNotByOne;api.divideReduced=_divideReduced;api.importRational=importRational;api.install=install;return api;}function implementRectangular(plugins){var Real=plugins.get("Real");var Complex=plugins.get("Complex");var g=plugins.get("es5globals");var uncurry=plugins.get("uncurry");var api=g.Object.create(null);var debug,isZero,isUnit,isPositive,isExact,isInexact;var toInexact,negate,multiply,cos,sin;var ZERO,ONE,MINUS_ONE,INEXACT_ZERO;debug=plugins.get("debug");isZero=plugins.get("isZero");isUnit=plugins.get("isUnit");isPositive=plugins.get("isPositive");isExact=plugins.get("isExact");isInexact=plugins.get("isInexact");toInexact=plugins.get("toInexact");negate=plugins.get("negate");multiply=plugins.get("multiply");cos=plugins.get("cos");sin=plugins.get("sin");function onPluginsChanged(plugins){ZERO=plugins.get("ZERO");ONE=plugins.get("ONE");MINUS_ONE=plugins.get("MINUS_ONE");INEXACT_ZERO=plugins.get("INEXACT_ZERO");}plugins.onChange.subscribe(onPluginsChanged);onPluginsChanged(plugins);function Rectangular(x,y){this._x=x;this._y=y;}Rectangular.prototype=new Complex();function Rectangular_realPart(){return this._x;}function Rectangular_imagPart(){return this._y;}function Rectangular_conjugate(){if(isExact(this._x)){return exactRectangular(this._x,negate(this._y));}return inexactRectangular(this._x,negate(this._y));}function Rectangular_debug(){return"Rectangular("+debug(this._x)+", "+debug(this._y)+")";}var I=new Rectangular(ZERO,ONE);var MINUS_I=new Rectangular(ZERO,MINUS_ONE);function exactRectangular(x,y){if(isZero(y)){return x;}if(isZero(x)&&isUnit(y)){return isPositive(y)?I:MINUS_I;}return new Rectangular(x,y);}function inexactRectangular(x,y){return new Rectangular(x,y);}function inexactPolar(r,theta){return inexactRectangular(multiply(cos(theta),r),multiply(sin(theta),r));}function exactPolar(r,theta){return inexactPolar(toInexact(r),toInexact(theta));}function Rectangular_isExact(){return isExact(this._x);}function Rectangular_isInexact(){return isInexact(this._x);}api.Rectangular=Rectangular;api.Rectangular_debug=Rectangular_debug;api.Rectangular_realPart=Rectangular_realPart;api.Rectangular_imagPart=Rectangular_imagPart;api.Rectangular_conjugate=Rectangular_conjugate;api.exactRectangular=exactRectangular;api.inexactRectangular=inexactRectangular;api.exactPolar=exactPolar;api.inexactPolar=inexactPolar;api.Rectangular_isExact=Rectangular_isExact;api.Rectangular_isInexact=Rectangular_isInexact;return api;}function installRectangular(plugins){var Rectangular=plugins.get("Rectangular");function def(generic,impl){var func=plugins.get(impl);if(!func){console.log(impl+" is not defined");}plugins.get(generic).def(Rectangular,func);}def("isReal","retFalse");def("isRational","retFalse");def("isInteger","retFalse");function defRect(name){def(name,"Rectangular_"+name);}defRect("realPart");defRect("imagPart");defRect("isExact");defRect("isInexact");defRect("conjugate");}function defaultIntegerFactory(plugins){var BgIntgr=BigInteger;if(!BgIntgr){if(typeof load!=="undefined"){load("biginteger.js");}else{if(this.readFile){eval(this.readFile("biginteger.js"));}else{throw new Error("BigInteger is not defined.");}}}return implementBigInteger(plugins,BgIntgr);}function configure(conf){var SchemeNumber=makeBase();var plugins=SchemeNumber.plugins;var disp=plugins.get("Dispatch");var debug=plugins.get("debug")||{def:function(){}};var integerFactory=conf.integerFactory||defaultIntegerFactory;var rationalFactory=conf.rationalFactory||defaultRationalFactory;var Integers=integerFactory(plugins);Integers.install();plugins.extend("nativeToExactInteger",Integers.nativeToExactInteger,"parseExactInteger",Integers.parseExactInteger);installDefaultExactInteger(plugins,Integers.importExactInteger);var Rationals=rationalFactory(plugins);Rationals.install();plugins.extend("divideReducedNotByOne",Rationals.divideReducedNotByOne);installDefaultRational(plugins,Rationals.importRational,Rationals.divideReduced);var Rectangulars=implementRectangular(plugins);var Rectangular=Rectangulars.Rectangular;plugins.extend(Rectangulars);disp.defClass("Rectangular",{ctor:Rectangular});debug.def(Rectangular,Rectangulars.Rectangular_debug);installRectangular(plugins);var Flonums=implementNativeInexactReal(plugins);var Flonum=Flonums.NativeInexactReal;plugins.extend("Flonum",Flonum);plugins.extend(Flonums);plugins.extend(implementNativeFlonumLibrary(plugins));disp.defClass("NativeInexactReal",{ctor:Flonum});debug.def(Flonum,Flonums.NativeInexactReal_debug);installFlonum(plugins);return SchemeNumber;}var SchemeNumber=configure({});SchemeNumber.configure=configure;return SchemeNumber;})();if(typeof exports!=="undefined"){exports.SchemeNumber=SchemeNumber;}function numberToString(value){var str=value+"";return str.indexOf("e")===-1?str:value.toFixed(20);}function convertToSchemeNumber(value){var n=value.indexOf("."),m;if(n!==-1){m=value.length-n-1;value=value.replace(".","")+"/1";for(var i=0;i<m;++i){value+="0";}}return SchemeNumber(value);}function parseExpression(str,args){if(str&&str._v){return str._v;}if(str&&typeof str=="string"&&args){str=str.replace(/%([a-z0-9а-я_]+)/ig,function(match,argnum){argnum=isNaN(Number(argnum))?argnum:(argnum-1);if(argnum in args){if(isNaN(Number(args[argnum]))){throw Error("Замена для аргумента "+match+" ("+args[argnum]+") не явлется числом");}else{return args[argnum];}}else{throw Error("Для аргумента "+match+" не предоставлена замена");}});}str=str||"0";if(typeof str=="number"){str=numberToString(str);}var priorities={"-":2,"+":2,"*":3,"/":3,"<":1,"<=":1,">":1,">=":1,"=":1,"==":1,"!=":1,")":0,"(":-1};function convertToPrefix(str){var stack=[],result=[],tmp,waitNum=true;function parseNumber(){var res=str.match(/^\s*([+-]*)\s*([0-9]+(?:\.[0-9]+)*)\s*/);if(res){str=str.substr(res[0].length);if(res[1]=="+"){res[1]="";}return res[1]+res[2];}else{return false;}}function parseNotNumber(){var res=str.match(/^\s*(>=|<=|==|!=|[\(\)\+\-*/><=])\s*/);if(res){str=str.substr(res[0].length);if(res[1]=="=="){res[1]="=";}return res[1];}else{return false;}}while(str.length){if(waitNum){tmp=parseNumber();if(tmp){result.push(tmp);waitNum=false;continue;}}tmp=parseNotNumber();if(tmp){if(waitNum&&tmp!="("){throw ('Unparsable expression: expected number or expression at >"'+str+'".');}waitNum=true;if(tmp=="("){stack.push(tmp);continue;}while(stack.length&&priorities[stack[stack.length-1]]>=priorities[tmp]){result.push(stack.pop());}if(tmp==")"){waitNum=false;if(stack.length&&stack[stack.length-1]=="("){stack.pop();}else{throw ("Unparsable expression: closing bracket without opening.");}}else{stack.push(tmp);}continue;}throw ('Unparsable expression: at symbol >"'+str+'".');}while(stack.length&&stack[stack.length-1]!="("){result.push(stack.pop());}if(stack.length){throw ("Unparsable expression: opening bracket without closing.");}return result;}var queue=convertToPrefix(str),stack=[],i;for(i=0;i<queue.length;++i){if(priorities[queue[i]]){if(stack.length<2){throw ('Unparsable expression: incorrect queue in prefix notation (not enough operands) >"['+queue.join(",")+"]["+i+']".');}var y=stack.pop(),x=stack.pop();if(priorities[queue[i]]==1&&i!=queue.length-1){throw ("Unparsable expression: multiple logic operations.");}stack.push(innerBigCalc(x,queue[i],y));}else{stack.push(queue[i]);}}if(stack.length>1){throw ('Unparsable expression: incorrect queue in prefix notation (too much operands) >"['+queue.join(",")+"]["+i+']".');}if(stack.length<1){throw ('Unparsable expression: incorrect queue in prefix notation (not enough operands) >"['+queue.join(",")+"]["+i+']".');}return stack[0];}function mySchemeNumberConstructor(value){value=value||"0";if(typeof value=="number"){value=numberToString(value);}if(typeof value=="string"){return convertToSchemeNumber(value);}else{if(value&&value._v){return value._v;}else{return value;}}}function innerBigCalc(operand1,operation,operand2){var bigNumReturnedOps=["+","-","*","/","abs"],booleanReturnedOps=[">",">=","<","<=","=","!="],stringReturnedOps=["toString"],allowedOps=bigNumReturnedOps.concat(booleanReturnedOps).concat(stringReturnedOps);if(Array.indexOf(allowedOps,operation)==-1){var parseArgs=[].slice.apply(arguments),parseResult;parseArgs.shift();if(parseArgs.length==1&&typeof parseArgs[0]=="object"){parseArgs=parseArgs[0];}parseResult=parseExpression.apply(null,[operand1,parseArgs]);if(typeof(parseResult)=="boolean"){return parseResult;}return new MyBigNum(parseResult);}if(operation=="!="){return !SchemeNumber.fn["="](mySchemeNumberConstructor(operand1),mySchemeNumberConstructor(operand2));}else{if(Array.indexOf(bigNumReturnedOps,operation)!=-1){return new MyBigNum(SchemeNumber.fn[operation](mySchemeNumberConstructor(operand1),mySchemeNumberConstructor(operand2)));}else{if(Array.indexOf(booleanReturnedOps,operation)!=-1){return SchemeNumber.fn[operation](mySchemeNumberConstructor(operand1),mySchemeNumberConstructor(operand2));}else{if(Array.indexOf(stringReturnedOps,operation)!=-1){if(operation==="toString"){return new MyBigNum(operand1).toString(operand2);}else{throw"Behaviour of operation "+operation+" should be defined in bignumLibrary";}}else{throw'bigNum operation "'+operation+'" is no allowed. Allowed operations are '+allowedOps.join(", ")+". ";}}}}}function MyBigNum(value){this._v=mySchemeNumberConstructor(value);}MyBigNum.prototype.toString=function(precesion){precesion=precesion!==undefined?precesion:2;return this._v.toFixed(precesion);};return innerBigCalc;})();